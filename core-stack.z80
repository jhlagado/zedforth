toR:                ; 59t
    ENTER 2         ; 11t
    _rpush D,E		; 34t		x		R: x 
	_drop			; 10t				R: x
    jp (HL)         ; 4t

rFrom:              ; 59t
    ENTER 2         ; 11t
	_dup			; 11t			
    _rpop	D,E		; 34t		x 		
    jp (HL)         ; 4t

rAt:
    ENTER 2         ; 11t
	_dup			; 11
    _rpeek D,E		; 34t				R: x		TMP x
    jp (HL)

twoToR:		        ; d --          
    ENTER 0
    _swap			
    call toR        
    call toR        
    EXIT 0

twoRFrom:	        ; -- d           
    ENTER 0
    call rFrom		
    call rFrom		
    _swap		
    EXIT 0

twoRAt:             ; a b -- a b x y  	R: x y
    ENTER 0
    call rFrom      ; 44t		a b y 		R: x
    call rAt        ; 44t		a b y x		R: x		TMP: x
    _swap           ; 20t		a b x y  
    _dup            ; 10t		a b x y y	R: x
    call toR        ; 45t		a b x y		R: x y
    EXIT 0

lit:
    pop HL          ; HL = return adr
    _dup            ; push current TOS
    ld E,(HL)       
    inc HL
    ld D,(HL)       ; TOS = word data at return adr
    inc HL          ; HL = return adr + 2
    jp (HL)         ; return to adr2 + 2

; -- p n   
; is followed by a literal Packed (Pascal) string
litStr:                         
    _swap           ; adr - return address
    call count      ; adr+1 len
    _twoDup         ; adr+1 len adr+1 len
    _plus           ; adr+1 len adr'
    ex DE,HL		; adr+1 len ?           HL: adr'
    pop DE		    ; adr+1 len             HL: adr'
    jp (HL)

; depth of data stack
; destroys: HL
depth:              ; -- n
    ENTER 0
    _spAt
    _push dStack
    _swap
    _minus    
    _twoSlash
    EXIT 0
    
