; BC = RP
; HL = TOS
; IX = IP

rdup:
    _rdup
    ret

rdrop:
    _rdrop		
    ret

toR:
    _swap
    call rdup
    pop IX
    ret

rFrom:
    ENTER
    call rAt
    call rDrop
    EXIT

rAt:
    ENTER
    _dup
    ld D,IXH
    ld E,IXL
    ex DE,HL
    EXIT

twoToR:		; d --          
    ENTER
    _swap			
    call toR        
    call toR        
    EXIT

twoRFrom:	; -- d           
    ENTER
    call rFrom		
    call rFrom		
    call swap		
    EXIT

twoRAt:     ; a b -- a b x y  	R: x y
    ENTER
    call rFrom
    _dup
    ex DE,HL
    call rAt
    call rDup
    ld IXH,D
    ld IXL,E
    EXIT





;      -- c-addr u   
; is followed by a literal Packed (Pascal) string
litString:                         
    ENTER
    _rFrom          ; addr
    call count          ; addr+1 len
    _twodup         ; addr+1 len addr+1 len
    call plus           ; addr+1 len addr+len+1
    _toR            ; addr+1 len
    EXIT                 ; TODO: optimise to LD HL,BC jp (HL)
