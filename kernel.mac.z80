; BC = RSP
; DE = IP
; HL = transient (used for jump)
; DE' = transient (used for intermediate results)
; HL' = TOS
; BC',IX,IY = unused

.macro _initKernel
    ld BC,rStack 
    ld DE,startForth
    ld IY,next16
    ld HL, FALSE
    ld (var_state),HL
    ld HL, 10
    ld (var_base),HL
    ld HL, (initialLatest)
    ld (var_latest),HL
    ld HL, START_USER
    ld (var_here),HL
.endm

.macro _rpush			    ; 38t		
    dec BC
    ld A,E
    ld (BC),A
    dec BC
    ld A,D
    ld (BC),A
.endm

.macro _rpop				; 38t		
    ld A,(BC)
    ld D,A
    inc BC
    ld A,(BC)
    ld E,A
    inc BC
.endm

.macro _rpeek						
    ld A,(BC)
    ld D,A
    inc BC
    ld A,(BC)
    ld E,A
    dec BC
.endm

.macro _next            
	jp (IY)
.endm

.macro _enter0           
    _rpush                              
    exx
.endm

.macro _exit0           
    exx
    _rpop                              
.endm

.macro _enter           
    _rpush                              
    rst $08
.endm

.macro _exit           
    dw exit
.endm

.macro _join           
    rst $08
.endm

.macro _rejoin           
    exx
    _join
.endm

.macro _unjoin           
    dw unjoin
    exx
.endm

.macro _call, label1           
    _rejoin
    dw label1
    _unjoin
.endm

; reads next cell into HL
; advances IP by 2
.macro _litParam:           ; 34t
    ex DE,HL
    ld E,(HL)
	inc HL
	ld D,(HL)
	inc HL
    ex DE,HL
.endm

; transfers HL to TOS (HL')
.macro _exPush              ; 38t
    push HL             
    exx
    _swap
    exx
.endm

; transfers TOS (HL') to HL
.macro _exPop               ; 38t
    exx
    _swap
    exx
    pop HL             
.endm

