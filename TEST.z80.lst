0000                             ; .engine mycomputer
0000                TESTMODE:   EQU   1   
0000                             ; .include "header.z80"
0000                             ;===============================================================================
0000                ROM_SIZE:   EQU   $2000   
0000                RAM_SIZE:   EQU   $10000 - ROM_SIZE   
0000                RSTACK_SIZE:   EQU   $80   ; return stack
0000                DSTACK_SIZE:   EQU   $80   ; parameter stack
0000                PAD_SIZE:   EQU   $80   ; user scratch pad
0000                SER_BUFSIZE:   EQU   $3F   
0000                LINE_BUFSIZE:   EQU   $80   
0000                START_ROM:   EQU   $0   
0000                START_RAM:   EQU   START_ROM + ROM_SIZE   
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   
0000                RET_STACK:   EQU   END_RAM   ; return stack, grows down
0000                IMMED:    EQU   $40   
0000                HIDE:     EQU   $80   
0000                FALSE:    EQU   0   
0000                TRUE:     EQU   -1   
0000                CALL_OPCODE:   EQU   $CD   
0000                JP_OPCODE:   EQU   $C3   
0000                RET_OPCODE:   EQU   $C9   
0000                BACKLINK:   .SET   0   ; assembler var, link to previous word
0000                SAVEASMPTR:   .SET   0   
0000                .macro _CODE,name,label,flags
0000                             ; 
0000                HEADER_label:
0000                 dw backLink                             ; link to previous word
0000                backLink: .set HEADER_label
0000                 db flags                                ; flags
0000                 .pstr name                              ; name string
0000                label:                                      ; body
0000                .endm
0000                 
0000                .macro CODE,name,label
0000                             ; 
0000                 _CODE name, label, 0
0000                .endm
0000                 
0000                             ; Prims are words which do not call other words.
0000                             ; Enter and Exit do not use RSTACK.
0000                .macro PRIM,name,label,bodyMacro
0000                             ; 
0000                 CODE name,label
0000                 pop IX
0000                 bodyMacro
0000                	jp (IX)			    ; 4t;
0000                .endm
0000                 
0000                .macro CONST,name,label,value
0000                             ; 
0000                 CODE name, label
0000                 call dup
0000                 ld BC, value
0000                 ret
0000                .endm
0000                 
0000                .macro VAR,name,label,variable
0000                             ; 
0000                 CONST name, label, variable
0000                .endm
0000                 
0000                .macro _FLAGS,flags
0000                             ; 
0000                 saveAsmPtr .set $
0000                 .org backLink + 2
0000                 db flags
0000                 .org saveAsmPtr
0000                .endm
0000                 
0000                .macro _INITKERNEL,
0000                             ; 
0000                 push IX
0000                 ld SP,dStack
0000                 ld BC,rStack
0000                 _push FALSE
0000                 _store state
0000                 _push 10
0000                 _store base
0000                 _fetch0 initialLatest
0000                 _store latest
0000                 _push START_USER
0000                 _store here
0000                 jp (IX)
0000                .endm
0000                 
0000                             ; enter and exit for normal colon words
0000                .macro ENTER,
0000                             ; 
0000                 _tdrop			    ; 10t	; x y 				TMP: a
0000                 _rpush H,L		    ; 34t	; x y    	R: a	
0000                .endm
0000                 
0000                .macro EXIT,
0000                             ; 
0000                	_rpop H,L			; 34t			R: 		TMP: a
0000                	jp (HL)			    ; 4t;
0000                .endm
0000                 
0000                             ; BC = RP
0000                             ; DE = TOS
0000                             ; HL = TMP (H = TH, L = TL)
0000                             ; (SP) = NOS
0000                .macro _RPEEK0,hi,lo
0000                             ; 
0000                	ld A,(BC)			        ; 7t
0000                 ld lo,A			            ; 4t
0000                 inc BC			            ; 6t
0000                 ld A,(BC)			        ; 7t
0000                 ld hi,A			            ; 4t
0000                .endm
0000                 
0000                .macro _RPEEK,hi,lo
0000                             ; 
0000                	_rpeek0 hi,lo			    ; 28t
0000                 dec BC			            ; 6t
0000                .endm
0000                 
0000                .macro _RPUSH,hi,lo
0000                             ; 
0000                 dec BC			            ; 6t
0000                 ld A,lo			            ; 4t
0000                 ld (BC),A			        ; 7t
0000                 dec BC			            ; 6t
0000                 ld A,hi			            ; 4t
0000                 ld (BC),A			        ; 7t
0000                .endm
0000                 
0000                .macro _RPOP,hi,lo
0000                             ; 
0000                	_rpeek0 hi,lo			    ; 28t
0000                 inc BC			            ; 6t
0000                .endm
0000                 
0000                .macro _UNNIP,
0000                             ; 
0000                	dec SP	
0000                 dec SP	
0000                .endm
0000                 
0000                .macro _TWOUNNIP,
0000                             ; 
0000                	_unnip	
0000                 _unnip	
0000                .endm
0000                 
0000                .macro _FROMTMP,
0000                             ; 
0000                	_dup			            ; 11t
0000                	_xTOS			            ; 4t
0000                .endm
0000                 
0000                .macro _TOTMP,
0000                             ; 
0000                 ex DE,HL		
0000                 POP DE		
0000                .endm
0000                 
0000                             ; 
0000                .macro _TDUP,
0000                             ; 
0000                 PUSH HL
0000                .endm
0000                 
0000                .macro _TDROP,
0000                             ; 
0000                 POP HL
0000                .endm
0000                 
0000                .macro _XTOS,
0000                             ; 
0000                 EX DE,HL
0000                .endm
0000                 
0000                .macro _XNOS,
0000                             ; 
0000                 EX(SP),HL
0000                .endm
0000                 
0000                .macro _DUP,
0000                             ; 
0000                 PUSH DE			        ; 11t
0000                .endm
0000                 
0000                .macro _DROP,
0000                             ; 
0000                 POP DE			            ; 10t
0000                .endm
0000                 
0000                .macro _SWAP,
0000                             ; 
0000                 _toTMP			            ; 14t			x1			TMP: x2
0000                 _Tdup			            ; 11t			x2 x1
0000                .endm
0000                 
0000                .macro _OVER,
0000                             ; 
0000                 _Tdrop			            ; 10t		x2			TMP: x1
0000                 _Tdup			            ; 11t			x1 x2			TMP: x1
0000                 _TMPfrom			        ; 14t                		x1 x2 x1
0000                .endm
0000                 
0000                .macro _NIP,
0000                             ; 
0000                 INC SP			; 6t
0000                 INC SP			; 6t
0000                .endm
0000                 
0000                .macro _TUCK,
0000                             ; 
0000                	_swap				        ; 25t
0000                 _over				        ; 35t
0000                .endm
0000                 
0000                .macro _ROT,
0000                             ; 
0000                 _toTMP			; 14t			x1 x2			TMP: x3
0000                 _xTOS			; 4t			x1 x3 			TMP: x2
0000                 _xNOS			; 20t			x2 x3 			TMP: x1
0000                 _TMPfrom		; 14t			x2 x3 x1
0000                .endm
0000                 
0000                .macro _CBANG,
0000                             ; 
0000                	_toTMP			; 14t
0000                 ld (HL),E		; 7t
0000                	_drop			; 10t
0000                .endm
0000                 
0000                .macro _AT,
0000                             ; 
0000                 _xTOS			; 4t
0000                 ld E,(HL)		; 7t
0000                	INC HL			; 6t
0000                 ld D,(HL)		; 7t
0000                .endm
0000                 
0000                .macro _BANG,
0000                             ; 
0000                	_toTMP				; 14t
0000                 ld (HL),E			; 7
0000                	INC HL			    ; 6
0000                 ld (HL),D			; 7
0000                .endm
0000                 
0000                .macro _TWODUP,
0000                             ; 
0000                 _Tdrop			    ; 10t		; x2				TMP: x1
0000                 _Tdup			    ; 11t			; x1 x2				TMP: x1
0000                	_dup				; 11t		; x1 x2 x2			TMP: x1
0000                	_Tdup			    ; 11t			; x1 x2 x1 x2
0000                .endm
0000                 
0000                .macro _TWODROP,
0000                             ; 
0000                 _drop				; 10t
0000                	_drop				; 10t
0000                .endm
0000                 
0000                .macro _TWOSWAP,
0000                             ; 
0000                 _toTMP			    ; 14			x1 x2 x3			TMP x4
0000                 _xNOS			    ; 19			x1 x4 x3			TMP x2
0000                 _nip			    ; 12			x1 x3		N x4   		TMP x2
0000                 _xTOS			    ; 4			x1 x2               		TMP x3
0000                 _xNOS			    ; 19			x3 x2				TMP x1
0000                 _xTOS			    ; 4			x3 x1				TMP x2
0000                 UNnip			    ; 12			x3 x4 x1			TMP x1
0000                 _TMPfrom			; 14			x3 x4 x1 x2
0000                .endm
0000                 
0000                .macro _TWOOVER,
0000                             ; 
0000                 _dup				; 11t		x1 x2 x3 x4 x4
0000                	_twoNip				; 24t		x1 x2 x4	      N: x3 x4
0000                	_drop				; 10t		x1 x2	                  N: x2 x3 x4
0000                	_Tdrop			    ; 10t		x2		      N: x1 x2 x3 x4  TMP = x1
0000                 _twoUnnip			; 24t		x1 x2 x2   	      N: x3 x4            TMP = x1
0000                	_twoUnnip			; 24t		x1 x2 x3 x4 x2                                TMP = x1
0000                 _Tdup			    ; 11t			x1 x2 x3 x4 x1 x2	
0000                .endm
0000                 
0000                .macro _TWOAT,
0000                             ; 
0000                	_dup				; 11t
0000                	_cellPlus			; 11t
0000                	_at				    ; 20t
0000                	_swap				; 19t
0000                	_at				    ; 20t
0000                .endm
0000                 
0000                .macro _TWOBANG,
0000                             ; 
0000                	_swap				; 19t		x a y
0000                	_over				; 16t		x a y a
0000                	_bang			    ; 46t		x a
0000                	_cellPlus			; 12t		x a+1
0000                	_bang			    ; 46t
0000                .endm
0000                 
0000                .macro _PLUS,
0000                             ; 
0000                 _toTMP
0000                 add HL,DE
0000                 ex DE,HL
0000                .endm
0000                 
0000                .macro _MINUS,
0000                             ; 
0000                 _Tdrop
0000                 or A
0000                 sbc HL,DE
0000                 ex DE,HL
0000                .endm
0000                 
0000                .macro _CELLPLUS,
0000                             ; 
0000                 inc DE
0000                 inc DE
0000                .endm
0000                 
0000                .macro _ONEPLUS,
0000                             ; 
0000                 inc DE
0000                .endm
0000                 
0000                .macro _ONEMINUS,
0000                             ; 
0000                 dec DE
0000                .endm
0000                 
0000                .macro _ISZERO,
0000                             ; 
0000                 ld A, E
0000                 or D
0000                 _drop
0000                .endm
0000                 
0000                .macro _PUSH,src
0000                             ; 
0000                 _dup
0000                 ld DE, src
0000                .endm
0000                 
0000                .macro _POP,dest
0000                             ; 
0000                 ld dest, DE
0000                 _drop
0000                .endm
0000                 
0000                .macro _PUSHC,src
0000                             ; 
0000                 _dup
0000                 ld E, src
0000                 ld D,0
0000                .endm
0000                 
0000                .macro _FETCH0,name
0000                             ; 
0000                 _push name
0000                 _at
0000                .endm
0000                 
0000                .macro _STORE0,name
0000                             ; 
0000                 _push name
0000                 _bang
0000                .endm
0000                 
0000                .macro _FETCH,name
0000                             ; 
0000                 _push var_name
0000                 _at
0000                .endm
0000                 
0000                .macro _STORE,name
0000                             ; 
0000                 _push var_name
0000                 _bang
0000                .endm
0000                 
0000                .macro _PRINTSTRING,s1
0000                             ; 
0000                 _pushString s1
0000                 call printStr
0000                .endm
0000                 
0000                .macro _PUSHSTRING,s1
0000                             ; 
0000                 call litString
0000                 .pstr s1
0000                .endm
0000                 
0000                .macro _COUNT,
0000                             ; 
0000                 _dup
0000                 _onePlus
0000                 _swap
0000                 _cat
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RST00:       ; Reset
0000   F3                     DI      ; Disable interrupts
0001   C3 00 02               JP   start   
0008                          .ORG   $0008   
0008                RST08:       ; rst 38
0008   C9                     RET      
0038                          .ORG   $0038   
0038                RST38:       ; rst 38
0038   C3 07 01               JP   serialIn   
003B                             ; resets the stacks so it must only be called from the top-level routine
003B                INITKERNEL:      
003B   DD E1                  POP   IX   
003D                          ;*Macro unroll:  _initKernel
003D   DD E5                  PUSH   IX   
003F   31 80 20               LD   SP,dStack   
0042   01 00 21               LD   BC,rStack   
0045                          ;*Macro unroll:  _push FALSE
0045                          ;*Macro unroll:  _dup
0045   D5                     PUSH   DE   
0046   11 00 00               LD   DE,FALSE   
0049                          ;*Macro unroll:  _store state
0049                          ;*Macro unroll:  _push var_state
0049                          ;*Macro unroll:  _dup
0049   D5                     PUSH   DE   
004A   11 53 22               LD   DE,var_state   
004D                          ;*Macro unroll:  _bang
004D                          ;*Macro unroll: 	_toTMP				; 14t
004D   EB                     EX   DE,HL   ; 14t
004E   D1                     POP   DE   
004F   73                     LD   (HL),E   
0050   23                     INC   HL   
0051   72                     LD   (HL),D   
0052                          ;*Macro unroll:  _push 10
0052                          ;*Macro unroll:  _dup
0052   D5                     PUSH   DE   
0053   11 0A 00               LD   DE,10   
0056                          ;*Macro unroll:  _store base
0056                          ;*Macro unroll:  _push var_base
0056                          ;*Macro unroll:  _dup
0056   D5                     PUSH   DE   
0057   11 4D 22               LD   DE,var_base   
005A                          ;*Macro unroll:  _bang
005A                          ;*Macro unroll: 	_toTMP				; 14t
005A   EB                     EX   DE,HL   ; 14t
005B   D1                     POP   DE   
005C   73                     LD   (HL),E   
005D   23                     INC   HL   
005E   72                     LD   (HL),D   
005F                          ;*Macro unroll:  _fetch0 initialLatest
005F                          ;*Macro unroll:  _push initialLatest
005F                          ;*Macro unroll:  _dup
005F   D5                     PUSH   DE   
0060   11 FE 01               LD   DE,initialLatest   
0063                          ;*Macro unroll:  _at
0063                          ;*Macro unroll:  _xTOS			; 4t
0063   EB                     EX   DE,HL   ; 4t
0064   5E                     LD   E,(HL)   
0065   23                     INC   HL   
0066   56                     LD   D,(HL)   
0067                          ;*Macro unroll:  _store latest
0067                          ;*Macro unroll:  _push var_latest
0067                          ;*Macro unroll:  _dup
0067   D5                     PUSH   DE   
0068   11 51 22               LD   DE,var_latest   
006B                          ;*Macro unroll:  _bang
006B                          ;*Macro unroll: 	_toTMP				; 14t
006B   EB                     EX   DE,HL   ; 14t
006C   D1                     POP   DE   
006D   73                     LD   (HL),E   
006E   23                     INC   HL   
006F   72                     LD   (HL),D   
0070                          ;*Macro unroll:  _push START_USER
0070                          ;*Macro unroll:  _dup
0070   D5                     PUSH   DE   
0071   11 81 22               LD   DE,START_USER   
0074                          ;*Macro unroll:  _store here
0074                          ;*Macro unroll:  _push var_here
0074                          ;*Macro unroll:  _dup
0074   D5                     PUSH   DE   
0075   11 4F 22               LD   DE,var_here   
0078                          ;*Macro unroll:  _bang
0078                          ;*Macro unroll: 	_toTMP				; 14t
0078   EB                     EX   DE,HL   ; 14t
0079   D1                     POP   DE   
007A   73                     LD   (HL),E   
007B   23                     INC   HL   
007C   72                     LD   (HL),D   
007D   DD E9                  JP   (IX)   
007F   DD E9                  JP   (IX)   
0081                             ; c@ ( a -- n )
0081                          ;*Macro unroll: PRIM 'c@',cAt,_cAt
0081                          ;*Macro unroll:  CODE "c@",cAt
0081                          ;*Macro unroll:  _CODE "c@", cAt, 0
0081                HEADER_CAT:      
0081   00 00                  DW   backLink   
0083                BACKLINK:   .SET   HEADER_cAt   
0083   00                     DB   0   
0084   02 63 40               .PSTR   "c@"   
0087                CAT:         
0087   DD E1                  POP   IX   
0089                          ;*Macro unroll:  _cAt
0089                          ;*Macro unroll: 	_xTOS			; 4t
0089   EB                     EX   DE,HL   ; 4t
008A   5E                     LD   E,(HL)   
008B   16 00                  LD   D,0   
008D   DD E9                  JP   (IX)   
008F                          ;*Macro unroll: _flags IMMED
008F                SAVEASMPTR:   .SET   $   
0083                          .ORG   backLink + 2   
0083   40                     DB   IMMED   
008F                          .ORG   saveAsmPtr   
008F                             ; c! ( n a -- )
008F                          ;*Macro unroll: PRIM 'c!',cBang,_cBang
008F                          ;*Macro unroll:  CODE "c!",cBang
008F                          ;*Macro unroll:  _CODE "c!", cBang, 0
008F                HEADER_CBANG:      
008F   81 00                  DW   backLink   
0091                BACKLINK:   .SET   HEADER_cBang   
0091   00                     DB   0   
0092   02 63 21               .PSTR   "c!"   
0095                CBANG:       
0095   DD E1                  POP   IX   
0097                          ;*Macro unroll:  _cBang
0097                          ;*Macro unroll: 	_toTMP			; 14t
0097   EB                     EX   DE,HL   ; 14t
0098   D1                     POP   DE   
0099   73                     LD   (HL),E   
009A                          ;*Macro unroll: 	_drop			; 10t
009A   D1                     POP   DE   ; 10t
009B   DD E9                  JP   (IX)   
009D                             ; @ ( a -- n )
009D                          ;*Macro unroll: PRIM "@",at,_at
009D                          ;*Macro unroll:  CODE "@",at
009D                          ;*Macro unroll:  _CODE "@", at, 0
009D                HEADER_AT:      
009D   8F 00                  DW   backLink   
009F                BACKLINK:   .SET   HEADER_at   
009F   00                     DB   0   
00A0   01 40                  .PSTR   "@"   
00A2                AT:          
00A2   DD E1                  POP   IX   
00A4                          ;*Macro unroll:  _at
00A4                          ;*Macro unroll:  _xTOS			; 4t
00A4   EB                     EX   DE,HL   ; 4t
00A5   5E                     LD   E,(HL)   
00A6   23                     INC   HL   
00A7   56                     LD   D,(HL)   
00A8   DD E9                  JP   (IX)   
00AA                             ; ! ( n a -- )
00AA                          ;*Macro unroll: PRIM "!",bang,_bang
00AA                          ;*Macro unroll:  CODE "!",bang
00AA                          ;*Macro unroll:  _CODE "!", bang, 0
00AA                HEADER_BANG:      
00AA   9D 00                  DW   backLink   
00AC                BACKLINK:   .SET   HEADER_bang   
00AC   00                     DB   0   
00AD   01 21                  .PSTR   "!"   
00AF                BANG:        
00AF   DD E1                  POP   IX   
00B1                          ;*Macro unroll:  _bang
00B1                          ;*Macro unroll: 	_toTMP				; 14t
00B1   EB                     EX   DE,HL   ; 14t
00B2   D1                     POP   DE   
00B3   73                     LD   (HL),E   
00B4   23                     INC   HL   
00B5   72                     LD   (HL),D   
00B6   DD E9                  JP   (IX)   
00B8                          ;*Macro unroll: CODE "emit", emit                            ; --
00B8                          ;*Macro unroll:  _CODE "emit", emit, 0
00B8                HEADER_EMIT:      
00B8   AA 00                  DW   backLink   
00BA                BACKLINK:   .SET   HEADER_emit   
00BA   00                     DB   0   
00BB   04 65 6D 69 74         .PSTR   "emit"   
00C0                EMIT:        
00C0   DD E1                  POP   IX   
00C2   79                     LD   A,C   
00C3   CD 43 01               CALL   putc   
00C6                          ;*Macro unroll:  _drop
00C6   D1                     POP   DE   
00C7   DD E9                  JP   (IX)   
00C9                          ;*Macro unroll: CODE ".", dot
00C9                          ;*Macro unroll:  _CODE ".", dot, 0
00C9                HEADER_DOT:      
00C9   B8 00                  DW   backLink   
00CB                BACKLINK:   .SET   HEADER_dot   
00CB   00                     DB   0   
00CC   01 2E                  .PSTR   "."   
00CE                DOT:         
00CE                          ;*Macro unroll:  ENTER
00CE                          ;*Macro unroll:  _tdrop			    ; 10t	; x y 				TMP: a
00CE   E1                     POP   HL   ; 10t	; x y 				TMP: a
00CF                          ;*Macro unroll:  _rpush H,L		    ; 34t	; x y    	R: a	
00CF   0B                     DEC   BC   ; 34t	; x y    	R: a	
00D0   7D                     LD   A,L   
00D1   02                     LD   (BC),A   
00D2   0B                     DEC   BC   
00D3   7C                     LD   A,H   
00D4   02                     LD   (BC),A   
00D5                          ;*Macro unroll:  _isZero
00D5   7B                     LD   A,E   
00D6   B2                     OR   D   
00D7                          ;*Macro unroll:  _drop
00D7   D1                     POP   DE   
00D8   28 07                  JR   z,dot1   
00DA                          ;*Macro unroll:  _pushc "0"
00DA                          ;*Macro unroll:  _dup
00DA   D5                     PUSH   DE   
00DB   1E 30                  LD   E,"0"   
00DD   16 00                  LD   D,0   
00DF   18 05                  JR   dot2   
00E1                DOT1:        
00E1                          ;*Macro unroll:  _pushc "?"
00E1                          ;*Macro unroll:  _dup
00E1   D5                     PUSH   DE   
00E2   1E 3F                  LD   E,"?"   
00E4   16 00                  LD   D,0   
00E6                DOT2:        
00E6   CD C0 00               CALL   emit   
00E9                          ;*Macro unroll:  EXIT
00E9                          ;*Macro unroll: 	_rpop H,L			; 34t			R: 		TMP: a
00E9                          ;*Macro unroll: 	_rpeek0 H,L			    ; 28t
00E9   0A                     LD   A,(BC)   ; 28t
00EA   6F                     LD   L,A   
00EB   03                     INC   BC   
00EC   0A                     LD   A,(BC)   
00ED   67                     LD   H,A   
00EE   03                     INC   BC   ; 34t			R: 		TMP: a
00EF   E9                     JP   (HL)   
00F0                             ; ; DE = TOS
00F0                             ; ; T. (x -- )
00F0                             ; ; report the test number to a numeric output device
00F0                             ; CODE "T.",tesDot
00F0                             ;     ENTER
00F0                             ;     jr z, tesDot1
00F0                             ;     _push $58
00F0                             ;     call emit
00F0                             ;     EXIT
00F0                             ; tesDot1:
00F0                             ;     _push $4F
00F0                             ;     call emit
00F0                             ;     EXIT
00F0                             ; ; hasn ( x1 h0 -- h1 )
00F0                             ; ; compute h1 by hashing x1 and h0
00F0                             ; CODE "hash",testHash
00F0                             ;     ENTER
00F0                             ;     _swap
00F0                             ;     _onePlus
00F0                             ;     call xorr
00F0                             ;     EXIT
00F0                             ; ; hash-n ( x1 x2 ... xn n -- h )
00F0                             ; ; hash n items from the stack and return the hash code
00F0                             ; CODE "hash-n",tesHashN
00F0                             ;     ENTER
00F0                             ;     _push 0
00F0                             ;     _toR
00F0                             ; tesHashN1:
00F0                             ;     _dup
00F0                             ;     _isZero
00F0                             ;     jr z,tesHashN2
00F0                             ;     _swap
00F0                             ;     _rFrom
00F0                             ;     call tesHash
00F0                             ;     _toR
00F0                             ;     _oneMinus
00F0                             ;     jr tesHashN1
00F0                             ; tesHashN2:
00F0                             ;     _drop
00F0                             ;     _rFrom
00F0                             ;     EXIT
00F0                             ; ; Tstart ( -- )
00F0                             ; ; start testing
00F0                             ; CODE "Tstart",tesStart
00F0                             ;     ENTER
00F0                             ;     _push 0
00F0                             ;     _store tesCount
00F0                             ;     EXIT
00F0                             ; ; T{ ( -- )
00F0                             ; ; start a unit test
00F0                             ; ;  Tcount @ 1+ dup T. Tcount !
00F0                             ; ;  depth Tdepth !
00F0                             ; CODE "T{",tesEnter
00F0                             ;     ENTER
00F0                             ;     _fetch testCnt
00F0                             ;     _onePlus
00F0                             ;     _dup
00F0                             ;     call tesDot
00F0                             ;     _store tesCount
00F0                             ;     call depth
00F0                             ;     _store tesDepth
00F0                             ;     EXIT
00F0                             ; ; }T ( y1 y2 ... yn -- hy )
00F0                             ; ; finish a unit test,
00F0                             ; CODE "}T",tesExit
00F0                             ;     ENTER
00F0                             ;     call depth
00F0                             ;     _fetch tesDepth
00F0                             ;     call minus
00F0                             ;     call tesHashN
00F0                             ;     call depth
00F0                             ;     _store tesDepth
00F0                             ;     EXIT
00F0                             ; ; == ( hy x1 x2 ... xn -- )
00F0                             ; ; compare actual output with expected output
00F0                             ; CODE "==",tesEQ
00F0                             ;     ENTER
00F0                             ;     call depth
00F0                             ;     _fetch tesDepth
00F0                             ;     call minus
00F0                             ;     call tesHashN
00F0                             ;     call equal
00F0                             ;     _isZero
00F0                             ;     jr z,tesQ1
00F0                             ;     halt
00F0                             ; tesQ1:
00F0                             ;     EXIT
00F0                             ; ; Tend ( -- )
00F0                             ; ; signal end of testing
00F0                             ; CODE "Tend",tesEnd
00F0                             ;     ENTER
00F0                             ;     _push -1
00F0                             ;     call tesDot
00F0                             ;     EXIT
00F0                SER_EMPTYSIZE:   EQU   5   
00F0                SER_FULLSIZE:   EQU   30H   
00F0                IO_CTRL:   EQU   $80   
00F0                IO_DATA:   EQU   $81   
00F0                RTS_HIGH:   EQU   $D6   ; 11010110
00F0                RTS_LOW:   EQU   $96   ; 10010110
00F0                PORT_STATUS:   EQU   $04   
00F0                PORT_DATA:   EQU   $03   
00F0                             ; destroys: HL
00F0                INITSERIAL:      
00F0   21 00 00               LD   HL,0   
00F3   22 04 21               LD   (serbufused),HL   
00F6   21 06 21               LD   HL,serbuf   
00F9   22 00 21               LD   (serinptr),HL   
00FC   22 02 21               LD   (serrdptr),HL   
00FF   3E 96                  LD   A,RTS_LOW   
0101   D3 80                  OUT   (IO_CTRL),A   
0103   ED 56                  IM   1   
0105   FB                     EI      
0106   C9                     RET      
0107                SERIALIN:      
0107   F5                     PUSH   AF   
0108   E5                     PUSH   HL   
0109   DB 80                  IN   A,(IO_CTRL)   
010B   E6 01                  AND   $01   
010D   28 05                  JR   z,serialIn1   
010F   DB 81                  IN   A,(IO_DATA)   
0111   CD 18 01               CALL   serialIn2   
0114                SERIALIN1:      
0114   E1                     POP   HL   
0115   F1                     POP   AF   
0116   FB                     EI      
0117   C9                     RET      
0118                             ; destroys: HL
0118                SERIALIN2:      
0118   F5                     PUSH   AF   
0119   3A 04 21               LD   A,(serBufUsed)   
011C   FE 3F                  CP   SER_BUFSIZE   
011E   20 02                  JR   nz,serialIn21   
0120   F1                     POP   AF   
0121   C9                     RET      
0122                SERIALIN21:      
0122   2A 00 21               LD   HL,(serInPtr)   
0125   23                     INC   HL   
0126   7D                     LD   A,L   ; Only need to check low byte becasuse lineBuf<256 bytes
0127   FE 45                  CP   (serBuf + SER_BUFSIZE) & $FF   
0129   20 03                  JR   nz,serialIn22   
012B   21 06 21               LD   HL,serBuf   
012E                SERIALIN22:      
012E   22 00 21               LD   (serInPtr),HL   
0131   F1                     POP   AF   
0132   77                     LD   (HL),A   
0133   3A 04 21               LD   A,(serBufUsed)   
0136   3C                     INC   A   
0137   32 04 21               LD   (serBufUsed),A   
013A   FE 30                  CP   SER_FULLSIZE   
013C   38 04                  JR   c,serialIn23   
013E   3E D6                  LD   A,RTS_HIGH   
0140   D3 80                  OUT   (IO_CTRL),A   
0142                SERIALIN23:      
0142   C9                     RET      
0143                             ; 
0143                             ; putc - output a character
0143                             ; params: A = char to output
0143                             ; 
0143                PUTC:        
0143   F5                     PUSH   AF   ; Store character
0144                PUTC0:       
0144   DB 80                  IN   A,(IO_CTRL)   ; Status byte
0146   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
0148   28 FA                  JR   z,putc0   
014A   F1                     POP   AF   ; Retrieve character
014B   D3 81                  OUT   (IO_DATA),A   ; Output the character
014D   C9                     RET      
014E                             ; 
014E                             ; serReady - check if there is input waiting to be read
014E                             ; flags: NZ if input ready
014E                             ; 
014E                SERREADY:      
014E   3A 04 21               LD   A,(serBufUsed)   
0151   FE 00                  CP   $0   
0153   C9                     RET      
0154                             ; 
0154                             ; getc - input
0154                             ; returns: A = input char
0154                             ; 
0154                GETC:        
0154   E5                     PUSH   HL   
0155                          IF   TESTMODE   
0155   2A 55 22               LD   HL,(charPtr)   
0158   7E                     LD   A,(HL)   
0159   23                     INC   HL   
015A   22 55 22               LD   (charPtr),HL   
015D                          ELSE      
                    GETC0:       
                              CALL   serReady   
                              JR   z,getc0   
                              LD   HL,(serRdPtr)   
                              INC   HL   
                              LD   A,L   ; Only need to check low byte because lineBuf<256 bytes
                              CP   (serBuf + SER_BUFSIZE) & $FF   
                              JR   nz,getc21   
                              LD   HL,serBuf   
                    GETC21:      
                              DI      
                              LD   (serRdPtr),HL   
                              LD   A,(serBufUsed)   
                              DEC   A   
                              LD   (serBufUsed),A   
                              CP   SER_EMPTYSIZE   
                              JR   nc,getc22   
                              LD   A,RTS_LOW   
                              OUT   (IO_CTRL),A   
                    GETC22:      
                              LD   A,(HL)   
                              EI      
015D                          ENDIF      
015D   E1                     POP   HL   
015E   C9                     RET      
015F                             ; BC = RP
015F                             ; HL = TOS
015F                TOR:         
015F   DD E1                  POP   IX   
0161                          ;*Macro unroll:  _rpush D,E		; 34t		x		R: x
0161   0B                     DEC   BC   ; 34t		x		R: x
0162   7B                     LD   A,E   
0163   02                     LD   (BC),A   
0164   0B                     DEC   BC   
0165   7A                     LD   A,D   
0166   02                     LD   (BC),A   
0167                          ;*Macro unroll: 	_drop			; 10t				R: x
0167   D1                     POP   DE   ; 10t				R: x
0168   DD E9                  JP   (IX)   
016A                RFROM:       
016A   DD E1                  POP   IX   
016C                          ;*Macro unroll: 	_dup			; 11t			
016C   D5                     PUSH   DE   ; 11t			
016D                          ;*Macro unroll:  _rpop	D,E		; 34t		x 		
016D                          ;*Macro unroll: 	_rpeek0 D,E			    ; 28t
016D   0A                     LD   A,(BC)   ; 28t
016E   5F                     LD   E,A   
016F   03                     INC   BC   
0170   0A                     LD   A,(BC)   
0171   57                     LD   D,A   
0172   03                     INC   BC   ; 34t		x 		
0173   DD E9                  JP   (IX)   
0175                RAT:         
0175   DD E1                  POP   IX   
0177                          ;*Macro unroll: 	_dup			; 11
0177   D5                     PUSH   DE   ; 11
0178                          ;*Macro unroll:  _rpeek D,E		; 34t				R: x		TMP x
0178                          ;*Macro unroll: 	_rpeek0 D,E			    ; 28t
0178   0A                     LD   A,(BC)   ; 28t
0179   5F                     LD   E,A   
017A   03                     INC   BC   
017B   0A                     LD   A,(BC)   
017C   57                     LD   D,A   
017D   0B                     DEC   BC   ; 34t				R: x		TMP x
017E   DD E9                  JP   (IX)   
0180                TWOTOR:      ; d --
0180                          ;*Macro unroll:  ENTER
0180                          ;*Macro unroll:  _tdrop			    ; 10t	; x y 				TMP: a
0180   E1                     POP   HL   ; 10t	; x y 				TMP: a
0181                          ;*Macro unroll:  _rpush H,L		    ; 34t	; x y    	R: a	
0181   0B                     DEC   BC   ; 34t	; x y    	R: a	
0182   7D                     LD   A,L   
0183   02                     LD   (BC),A   
0184   0B                     DEC   BC   
0185   7C                     LD   A,H   
0186   02                     LD   (BC),A   
0187                          ;*Macro unroll:  _swap			
0187                          ;*Macro unroll:  _toTMP			            ; 14t			x1			TMP: x2
0187   EB                     EX   DE,HL   ; 14t			x1			TMP: x2
0188   D1                     POP   DE   
0189                          ;*Macro unroll:  _Tdup			            ; 11t			x2 x1
0189   E5                     PUSH   HL   ; 11t			x2 x1
018A   CD 5F 01               CALL   toR   
018D   CD 5F 01               CALL   toR   
0190                          ;*Macro unroll:  EXIT
0190                          ;*Macro unroll: 	_rpop H,L			; 34t			R: 		TMP: a
0190                          ;*Macro unroll: 	_rpeek0 H,L			    ; 28t
0190   0A                     LD   A,(BC)   ; 28t
0191   6F                     LD   L,A   
0192   03                     INC   BC   
0193   0A                     LD   A,(BC)   
0194   67                     LD   H,A   
0195   03                     INC   BC   ; 34t			R: 		TMP: a
0196   E9                     JP   (HL)   
0197                TWORFROM:      ; -- d
0197                          ;*Macro unroll:  ENTER
0197                          ;*Macro unroll:  _tdrop			    ; 10t	; x y 				TMP: a
0197   E1                     POP   HL   ; 10t	; x y 				TMP: a
0198                          ;*Macro unroll:  _rpush H,L		    ; 34t	; x y    	R: a	
0198   0B                     DEC   BC   ; 34t	; x y    	R: a	
0199   7D                     LD   A,L   
019A   02                     LD   (BC),A   
019B   0B                     DEC   BC   
019C   7C                     LD   A,H   
019D   02                     LD   (BC),A   
019E   CD 6A 01               CALL   rFrom   
01A1   CD 6A 01               CALL   rFrom   
01A4                          ;*Macro unroll:  _swap		
01A4                          ;*Macro unroll:  _toTMP			            ; 14t			x1			TMP: x2
01A4   EB                     EX   DE,HL   ; 14t			x1			TMP: x2
01A5   D1                     POP   DE   
01A6                          ;*Macro unroll:  _Tdup			            ; 11t			x2 x1
01A6   E5                     PUSH   HL   ; 11t			x2 x1
01A7                          ;*Macro unroll:  EXIT
01A7                          ;*Macro unroll: 	_rpop H,L			; 34t			R: 		TMP: a
01A7                          ;*Macro unroll: 	_rpeek0 H,L			    ; 28t
01A7   0A                     LD   A,(BC)   ; 28t
01A8   6F                     LD   L,A   
01A9   03                     INC   BC   
01AA   0A                     LD   A,(BC)   
01AB   67                     LD   H,A   
01AC   03                     INC   BC   ; 34t			R: 		TMP: a
01AD   E9                     JP   (HL)   
01AE                TWORAT:      ; a b -- a b x y  	R: x y
01AE                          ;*Macro unroll:  ENTER
01AE                          ;*Macro unroll:  _tdrop			    ; 10t	; x y 				TMP: a
01AE   E1                     POP   HL   ; 10t	; x y 				TMP: a
01AF                          ;*Macro unroll:  _rpush H,L		    ; 34t	; x y    	R: a	
01AF   0B                     DEC   BC   ; 34t	; x y    	R: a	
01B0   7D                     LD   A,L   
01B1   02                     LD   (BC),A   
01B2   0B                     DEC   BC   
01B3   7C                     LD   A,H   
01B4   02                     LD   (BC),A   
01B5   CD 6A 01               CALL   rFrom   ; 44t		a b y 		R: x
01B8   CD 75 01               CALL   rAt   ; 44t		a b y x		R: x		TMP: x
01BB                          ;*Macro unroll:  _swap           ; 20t		a b x y
01BB                          ;*Macro unroll:  _toTMP			            ; 14t			x1			TMP: x2
01BB   EB                     EX   DE,HL   ; 14t			x1			TMP: x2
01BC   D1                     POP   DE   
01BD                          ;*Macro unroll:  _Tdup			            ; 11t			x2 x1
01BD   E5                     PUSH   HL   ; 11t			x2 x1
01BE                          ;*Macro unroll:  _dup            ; 10t		a b x y y	R: x
01BE   D5                     PUSH   DE   ; 10t		a b x y y	R: x
01BF   CD 5F 01               CALL   toR   ; 45t		a b x y		R: x y
01C2                          ;*Macro unroll:  EXIT
01C2                          ;*Macro unroll: 	_rpop H,L			; 34t			R: 		TMP: a
01C2                          ;*Macro unroll: 	_rpeek0 H,L			    ; 28t
01C2   0A                     LD   A,(BC)   ; 28t
01C3   6F                     LD   L,A   
01C4   03                     INC   BC   
01C5   0A                     LD   A,(BC)   
01C6   67                     LD   H,A   
01C7   03                     INC   BC   ; 34t			R: 		TMP: a
01C8   E9                     JP   (HL)   
01C9                             ;      -- c-addr u
01C9                             ; is followed by a literal Packed (Pascal) string
01C9                LITSTRING:      
01C9                          ;*Macro unroll:  ENTER
01C9                          ;*Macro unroll:  _tdrop			    ; 10t	; x y 				TMP: a
01C9   E1                     POP   HL   ; 10t	; x y 				TMP: a
01CA                          ;*Macro unroll:  _rpush H,L		    ; 34t	; x y    	R: a	
01CA   0B                     DEC   BC   ; 34t	; x y    	R: a	
01CB   7D                     LD   A,L   
01CC   02                     LD   (BC),A   
01CD   0B                     DEC   BC   
01CE   7C                     LD   A,H   
01CF   02                     LD   (BC),A   
01D0   CD 6A 01               CALL   rFrom   ; addr
01D3   CD F1 01               CALL   count   ; addr+1 len
01D6                          ;*Macro unroll:  _twoDup         ; addr+1 len addr+1 len
01D6                          ;*Macro unroll:  _Tdrop			    ; 10t		; x2				TMP: x1
01D6   E1                     POP   HL   ; 10t		; x2				TMP: x1
01D7                          ;*Macro unroll:  _Tdup			    ; 11t			; x1 x2				TMP: x1
01D7   E5                     PUSH   HL   ; 11t			; x1 x2				TMP: x1
01D8                          ;*Macro unroll: 	_dup				; 11t		; x1 x2 x2			TMP: x1
01D8   D5                     PUSH   DE   ; 11t		; x1 x2 x2			TMP: x1
01D9                          ;*Macro unroll: 	_Tdup			    ; 11t			; x1 x2 x1 x2
01D9   E5                     PUSH   HL   ; 11t			; x1 x2 x1 x2
01DA                          ;*Macro unroll:  _plus           ; addr+1 len addr+len+1
01DA                          ;*Macro unroll:  _toTMP
01DA   EB                     EX   DE,HL   
01DB   D1                     POP   DE   
01DC   19                     ADD   HL,DE   ; addr+1 len addr+len+1
01DD   EB                     EX   DE,HL   
01DE   CD 5F 01               CALL   toR   ; addr+1 len
01E1                          ;*Macro unroll:  EXIT            ; TODO: optimise to LD HL,BC jp (HL)
01E1                          ;*Macro unroll: 	_rpop H,L			; 34t			R: 		TMP: a
01E1                          ;*Macro unroll: 	_rpeek0 H,L			    ; 28t
01E1   0A                     LD   A,(BC)   ; 28t
01E2   6F                     LD   L,A   
01E3   03                     INC   BC   
01E4   0A                     LD   A,(BC)   
01E5   67                     LD   H,A   
01E6   03                     INC   BC   ; 34t			R: 		TMP: a
01E7   E9                     JP   (HL)   ; TODO: optimise to LD HL,BC jp (HL)
01E8                             ;   COUNT       ( b -- b +n )
01E8                             ;               Return count byte of a string and add 1 to byte address.
01E8                          ;*Macro unroll: PRIM 'COUNT',count,_count
01E8                          ;*Macro unroll:  CODE "COUNT",count
01E8                          ;*Macro unroll:  _CODE "COUNT", count, 0
01E8                HEADER_COUNT:      
01E8   C9 00                  DW   backLink   
01EA                BACKLINK:   .SET   HEADER_count   
01EA   00                     DB   0   
01EB   05 43 4F 55 4E 54      .PSTR   "COUNT"   
01F1                COUNT:       
01F1   DD E1                  POP   IX   
01F3                          ;*Macro unroll:  _count
01F3                          ;*Macro unroll:  _dup
01F3   D5                     PUSH   DE   
01F4                          ;*Macro unroll:  _onePlus
01F4   13                     INC   DE   
01F5                          ;*Macro unroll:  _swap
01F5                          ;*Macro unroll:  _toTMP			            ; 14t			x1			TMP: x2
01F5   EB                     EX   DE,HL   ; 14t			x1			TMP: x2
01F6   D1                     POP   DE   
01F7                          ;*Macro unroll:  _Tdup			            ; 11t			x2 x1
01F7   E5                     PUSH   HL   ; 11t			x2 x1
01F8                          ;*Macro unroll:  _cat
01F8                          ;*Macro unroll: 	_xTOS			; 4t
01F8   EB                     EX   DE,HL   ; 4t
01F9   5E                     LD   E,(HL)   
01FA   16 00                  LD   D,0   
01FC   DD E9                  JP   (IX)   
01FE                INITIALLATEST:      
01FE   E8 01                  DW   backLink   
0200                START:       
0200                          ;*Macro unroll:  _initKernel
0200   DD E5                  PUSH   IX   
0202   31 80 20               LD   SP,dStack   
0205   01 00 21               LD   BC,rStack   
0208                          ;*Macro unroll:  _push FALSE
0208                          ;*Macro unroll:  _dup
0208   D5                     PUSH   DE   
0209   11 00 00               LD   DE,FALSE   
020C                          ;*Macro unroll:  _store state
020C                          ;*Macro unroll:  _push var_state
020C                          ;*Macro unroll:  _dup
020C   D5                     PUSH   DE   
020D   11 53 22               LD   DE,var_state   
0210                          ;*Macro unroll:  _bang
0210                          ;*Macro unroll: 	_toTMP				; 14t
0210   EB                     EX   DE,HL   ; 14t
0211   D1                     POP   DE   
0212   73                     LD   (HL),E   
0213   23                     INC   HL   
0214   72                     LD   (HL),D   
0215                          ;*Macro unroll:  _push 10
0215                          ;*Macro unroll:  _dup
0215   D5                     PUSH   DE   
0216   11 0A 00               LD   DE,10   
0219                          ;*Macro unroll:  _store base
0219                          ;*Macro unroll:  _push var_base
0219                          ;*Macro unroll:  _dup
0219   D5                     PUSH   DE   
021A   11 4D 22               LD   DE,var_base   
021D                          ;*Macro unroll:  _bang
021D                          ;*Macro unroll: 	_toTMP				; 14t
021D   EB                     EX   DE,HL   ; 14t
021E   D1                     POP   DE   
021F   73                     LD   (HL),E   
0220   23                     INC   HL   
0221   72                     LD   (HL),D   
0222                          ;*Macro unroll:  _fetch0 initialLatest
0222                          ;*Macro unroll:  _push initialLatest
0222                          ;*Macro unroll:  _dup
0222   D5                     PUSH   DE   
0223   11 FE 01               LD   DE,initialLatest   
0226                          ;*Macro unroll:  _at
0226                          ;*Macro unroll:  _xTOS			; 4t
0226   EB                     EX   DE,HL   ; 4t
0227   5E                     LD   E,(HL)   
0228   23                     INC   HL   
0229   56                     LD   D,(HL)   
022A                          ;*Macro unroll:  _store latest
022A                          ;*Macro unroll:  _push var_latest
022A                          ;*Macro unroll:  _dup
022A   D5                     PUSH   DE   
022B   11 51 22               LD   DE,var_latest   
022E                          ;*Macro unroll:  _bang
022E                          ;*Macro unroll: 	_toTMP				; 14t
022E   EB                     EX   DE,HL   ; 14t
022F   D1                     POP   DE   
0230   73                     LD   (HL),E   
0231   23                     INC   HL   
0232   72                     LD   (HL),D   
0233                          ;*Macro unroll:  _push START_USER
0233                          ;*Macro unroll:  _dup
0233   D5                     PUSH   DE   
0234   11 81 22               LD   DE,START_USER   
0237                          ;*Macro unroll:  _store here
0237                          ;*Macro unroll:  _push var_here
0237                          ;*Macro unroll:  _dup
0237   D5                     PUSH   DE   
0238   11 4F 22               LD   DE,var_here   
023B                          ;*Macro unroll:  _bang
023B                          ;*Macro unroll: 	_toTMP				; 14t
023B   EB                     EX   DE,HL   ; 14t
023C   D1                     POP   DE   
023D   73                     LD   (HL),E   
023E   23                     INC   HL   
023F   72                     LD   (HL),D   
0240   DD E9                  JP   (IX)   
0242   CD F0 00               CALL   initSerial   
0245                             ; call initInput
0245                             ; end header  ============================================================
0245   C3 5B 22               JP   TESTS_START   
2000                          .ORG   START_RAM   
2000                          DS   DSTACK_SIZE   
2080                DSTACK:      ; grows down
2080                          DS   RSTACK_SIZE   
2100                RSTACK:      ; grows down
2100   00 00        SERINPTR:   DW   0   
2102   00 00        SERRDPTR:   DW   0   
2104   00 00        SERBUFUSED:   DW   0   
2106                SERBUF:   DS   SER_BUFSIZE   
2145   00 00        LINEBUFSTART:   DW   0   
2147   00 00        LINEBUFSIZE:   DW   0   
2149   00 00        CURRKEY:   DW   0   
214B   00 00        LINEBUFTOP:   DW   0   
214D                LINEBUF:   DS   LINE_BUFSIZE   
21CD                WORDBUF1:   DS   64   
220D                WORDBUF2:   DS   64   
224D   00 00        VAR_BASE:   DW   0   
224F   00 00        VAR_HERE:   DW   0   
2251   00 00        VAR_LATEST:   DW   0   
2253   00 00        VAR_STATE:   DW   FALSE   
2255   00 00        CHARPTR:   DW   0   ; mocking getc
2257   00 00        TESCOUNT:   DW   0   ; core-tester
2259   00 00        TESDEPTH:   DW   0   ; core-tester
225B                TESTS_START:      
225B                          ;*Macro unroll:  _push 16
225B                          ;*Macro unroll:  _dup
225B   D5                     PUSH   DE   
225C   11 10 00               LD   DE,16   
225F                          ;*Macro unroll:  _store base
225F                          ;*Macro unroll:  _push var_base
225F                          ;*Macro unroll:  _dup
225F   D5                     PUSH   DE   
2260   11 4D 22               LD   DE,var_base   
2263                          ;*Macro unroll:  _bang
2263                          ;*Macro unroll: 	_toTMP				; 14t
2263   EB                     EX   DE,HL   ; 14t
2264   D1                     POP   DE   
2265   73                     LD   (HL),E   
2266   23                     INC   HL   
2267   72                     LD   (HL),D   
2268                          ;*Macro unroll:  _push 1
2268                          ;*Macro unroll:  _dup
2268   D5                     PUSH   DE   
2269   11 01 00               LD   DE,1   
226C                          ;*Macro unroll:  _push 2
226C                          ;*Macro unroll:  _dup
226C   D5                     PUSH   DE   
226D   11 02 00               LD   DE,2   
2270                          ;*Macro unroll:  _plus
2270                          ;*Macro unroll:  _toTMP
2270   EB                     EX   DE,HL   
2271   D1                     POP   DE   
2272   19                     ADD   HL,DE   
2273   EB                     EX   DE,HL   
2274                          ;*Macro unroll:  _push 3
2274                          ;*Macro unroll:  _dup
2274   D5                     PUSH   DE   
2275   11 03 00               LD   DE,3   
2278                          ;*Macro unroll:  _minus
2278                          ;*Macro unroll:  _Tdrop
2278   E1                     POP   HL   
2279   B7                     OR   A   
227A   ED 52                  SBC   HL,DE   
227C   EB                     EX   DE,HL   
227D   CD CE 00               CALL   dot   
2280                             ; call tesStart
2280                             ; call tesEnter
2280                             ; _push 1
2280                             ; _dup
2280                             ; call tesExit
2280                             ; _push 1
2280                             ; _push 1
2280                             ; call tesEq
2280                             ; call tesEnd
2280                             ; _printString "\r\nDone! \r\n"
2280   76                     HALT      
2281                START_USER:      


TESTMODE:           0001 DEFINED AT LINE 3
ROM_SIZE:           2000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 2 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
RSTACK_SIZE:        0080 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 3 IN variables.z80
DSTACK_SIZE:        0080 DEFINED AT LINE 4 IN constants.z80
                    > USED AT LINE 1 IN variables.z80
PAD_SIZE:           0080 DEFINED AT LINE 5 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 7 IN constants.z80
                    > USED AT LINE 46 IN core-serial.z80
                    > USED AT LINE 54 IN core-serial.z80
                    > USED AT LINE 9 IN variables.z80
LINE_BUFSIZE:       0080 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 15 IN variables.z80
START_ROM:          0000 DEFINED AT LINE 10 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
                    > USED AT LINE 15
START_RAM:          2000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
                    > USED AT LINE 50
END_RAM:            10000 DEFINED AT LINE 12 IN constants.z80
                    > USED AT LINE 13 IN constants.z80
RET_STACK:          10000 DEFINED AT LINE 13 IN constants.z80
IMMED:              0040 DEFINED AT LINE 15 IN constants.z80
                    > USED AT LINE 40
HIDE:               0080 DEFINED AT LINE 16 IN constants.z80
FALSE:              0000 DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 23 IN variables.z80
TRUE:               00-1 DEFINED AT LINE 19 IN constants.z80
CALL_OPCODE:        00CD DEFINED AT LINE 21 IN constants.z80
JP_OPCODE:          00C3 DEFINED AT LINE 22 IN constants.z80
RET_OPCODE:         00C9 DEFINED AT LINE 23 IN constants.z80
BACKLINK:           01E8 DEFINED AT LINE 7
                    > USED AT LINE 6
                    > USED AT LINE 39
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 37
SAVEASMPTR:         008F DEFINED AT LINE 38
                    > USED AT LINE 41
RST00:              0000 DEFINED AT LINE 16
RST08:              0008 DEFINED AT LINE 21
RST38:              0038 DEFINED AT LINE 25
INITKERNEL:         003B DEFINED AT LINE 2 IN core-kernel.z80
HEADER_CAT:         0081 DEFINED AT LINE 5
                    > USED AT LINE 7
CAT:                0087 DEFINED AT LINE 10
HEADER_CBANG:       008F DEFINED AT LINE 5
                    > USED AT LINE 7
CBANG:              0095 DEFINED AT LINE 10
HEADER_AT:          009D DEFINED AT LINE 5
                    > USED AT LINE 7
AT:                 00A2 DEFINED AT LINE 10
HEADER_BANG:        00AA DEFINED AT LINE 5
                    > USED AT LINE 7
BANG:               00AF DEFINED AT LINE 10
HEADER_EMIT:        00B8 DEFINED AT LINE 5
                    > USED AT LINE 7
EMIT:               00C0 DEFINED AT LINE 10
                    > USED AT LINE 17 IN core-print.z80
HEADER_DOT:         00C9 DEFINED AT LINE 5
                    > USED AT LINE 7
DOT:                00CE DEFINED AT LINE 10
                    > USED AT LINE 66
DOT1:               00E1 DEFINED AT LINE 14 IN core-print.z80
                    > USED AT LINE 11 IN core-print.z80
DOT2:               00E6 DEFINED AT LINE 16 IN core-print.z80
                    > USED AT LINE 13 IN core-print.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 1 IN core-serial.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 2 IN core-serial.z80
                    > USED AT LINE 64 IN core-serial.z80
IO_CTRL:            0080 DEFINED AT LINE 4 IN core-serial.z80
                    > USED AT LINE 22 IN core-serial.z80
                    > USED AT LINE 31 IN core-serial.z80
                    > USED AT LINE 67 IN core-serial.z80
                    > USED AT LINE 79 IN core-serial.z80
IO_DATA:            0081 DEFINED AT LINE 5 IN core-serial.z80
                    > USED AT LINE 34 IN core-serial.z80
                    > USED AT LINE 83 IN core-serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 6 IN core-serial.z80
                    > USED AT LINE 66 IN core-serial.z80
RTS_LOW:            0096 DEFINED AT LINE 7 IN core-serial.z80
                    > USED AT LINE 21 IN core-serial.z80
PORT_STATUS:        0004 DEFINED AT LINE 9 IN core-serial.z80
PORT_DATA:          0003 DEFINED AT LINE 10 IN core-serial.z80
INITSERIAL:         00F0 DEFINED AT LINE 13 IN core-serial.z80
                    > USED AT LINE 41
SERIALIN:           0107 DEFINED AT LINE 28 IN core-serial.z80
                    > USED AT LINE 26
SERIALIN1:          0114 DEFINED AT LINE 36 IN core-serial.z80
                    > USED AT LINE 33 IN core-serial.z80
SERIALIN2:          0118 DEFINED AT LINE 43 IN core-serial.z80
                    > USED AT LINE 35 IN core-serial.z80
SERIALIN21:         0122 DEFINED AT LINE 50 IN core-serial.z80
                    > USED AT LINE 47 IN core-serial.z80
SERIALIN22:         012E DEFINED AT LINE 57 IN core-serial.z80
                    > USED AT LINE 55 IN core-serial.z80
SERIALIN23:         0142 DEFINED AT LINE 68 IN core-serial.z80
                    > USED AT LINE 65 IN core-serial.z80
PUTC:               0143 DEFINED AT LINE 76 IN core-serial.z80
                    > USED AT LINE 4 IN core-print.z80
PUTC0:              0144 DEFINED AT LINE 78 IN core-serial.z80
                    > USED AT LINE 81 IN core-serial.z80
SERREADY:           014E DEFINED AT LINE 91 IN core-serial.z80
GETC:               0154 DEFINED AT LINE 102 IN core-serial.z80
TOR:                015F DEFINED AT LINE 4 IN core-stack.z80
                    > USED AT LINE 25 IN core-stack.z80
                    > USED AT LINE 26 IN core-stack.z80
                    > USED AT LINE 42 IN core-stack.z80
                    > USED AT LINE 53 IN core-stack.z80
RFROM:              016A DEFINED AT LINE 10 IN core-stack.z80
                    > USED AT LINE 31 IN core-stack.z80
                    > USED AT LINE 32 IN core-stack.z80
                    > USED AT LINE 38 IN core-stack.z80
                    > USED AT LINE 49 IN core-stack.z80
RAT:                0175 DEFINED AT LINE 16 IN core-stack.z80
                    > USED AT LINE 39 IN core-stack.z80
TWOTOR:             0180 DEFINED AT LINE 22 IN core-stack.z80
TWORFROM:           0197 DEFINED AT LINE 29 IN core-stack.z80
TWORAT:             01AE DEFINED AT LINE 36 IN core-stack.z80
LITSTRING:          01C9 DEFINED AT LINE 47 IN core-stack.z80
HEADER_COUNT:       01E8 DEFINED AT LINE 5
                    > USED AT LINE 7
COUNT:              01F1 DEFINED AT LINE 10
                    > USED AT LINE 50 IN core-stack.z80
INITIALLATEST:      01FE DEFINED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 36
START:              0200 DEFINED AT LINE 39
                    > USED AT LINE 18
DSTACK:             2080 DEFINED AT LINE 2 IN variables.z80
                    > USED AT LINE 3
                    > USED AT LINE 3
RSTACK:             2100 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 4
                    > USED AT LINE 4
SERINPTR:           2100 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 18 IN core-serial.z80
                    > USED AT LINE 51 IN core-serial.z80
                    > USED AT LINE 58 IN core-serial.z80
SERRDPTR:           2102 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 19 IN core-serial.z80
SERBUFUSED:         2104 DEFINED AT LINE 8 IN variables.z80
                    > USED AT LINE 15 IN core-serial.z80
                    > USED AT LINE 45 IN core-serial.z80
                    > USED AT LINE 61 IN core-serial.z80
                    > USED AT LINE 63 IN core-serial.z80
                    > USED AT LINE 92 IN core-serial.z80
SERBUF:             2106 DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 17 IN core-serial.z80
                    > USED AT LINE 54 IN core-serial.z80
                    > USED AT LINE 56 IN core-serial.z80
LINEBUFSTART:       2145 DEFINED AT LINE 11 IN variables.z80
LINEBUFSIZE:        2147 DEFINED AT LINE 12 IN variables.z80
CURRKEY:            2149 DEFINED AT LINE 13 IN variables.z80
LINEBUFTOP:         214B DEFINED AT LINE 14 IN variables.z80
LINEBUF:            214D DEFINED AT LINE 15 IN variables.z80
WORDBUF1:           21CD DEFINED AT LINE 17 IN variables.z80
WORDBUF2:           220D DEFINED AT LINE 18 IN variables.z80
VAR_BASE:           224D DEFINED AT LINE 20 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_HERE:           224F DEFINED AT LINE 21 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_LATEST:         2251 DEFINED AT LINE 22 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_STATE:          2253 DEFINED AT LINE 23 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
CHARPTR:            2255 DEFINED AT LINE 53
                    > USED AT LINE 107 IN core-serial.z80
                    > USED AT LINE 110 IN core-serial.z80
TESCOUNT:           2257 DEFINED AT LINE 54
TESDEPTH:           2259 DEFINED AT LINE 55
TESTS_START:        225B DEFINED AT LINE 57
                    > USED AT LINE 48
START_USER:         2281 DEFINED AT LINE 86
                    > USED AT LINE 36
                    > USED AT LINE 36
