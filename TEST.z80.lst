0000                             ; .engine mycomputer
0000                TESTMODE:   EQU   1   
0000                             ; .include "header.z80"
0000                             ;===============================================================================
0000                ROM_SIZE:   EQU   $2000   
0000                RAM_SIZE:   EQU   $10000 - ROM_SIZE   
0000                RSTACK_SIZE:   EQU   $80   ; return stack
0000                DSTACK_SIZE:   EQU   $80   ; parameter stack
0000                PAD_SIZE:   EQU   $80   ; user scratch pad
0000                SER_BUFSIZE:   EQU   $3F   
0000                LINE_BUFSIZE:   EQU   $80   
0000                START_ROM:   EQU   $0   
0000                START_RAM:   EQU   START_ROM + ROM_SIZE   
0000                END_RAM:   EQU   START_RAM + RAM_SIZE   
0000                RET_STACK:   EQU   END_RAM   ; return stack, grows down
0000                IMMED:    EQU   $40   
0000                HIDE:     EQU   $80   
0000                FALSE:    EQU   0   
0000                TRUE:     EQU   -1   
0000                CALL_OPCODE:   EQU   $CD   
0000                JP_OPCODE:   EQU   $C3   
0000                RET_OPCODE:   EQU   $C9   
0000                BACKLINK:   .SET   0   ; assembler var, link to previous word
0000                .macro _CODE,name,flags,label
0000                             ; 
0000                HEADER_label:
0000                 DW backLink                             ; link to previous word
0000                backLink: .set HEADER_label
0000                 DB flags                                ; flags
0000                 .pstr name                              ; name string
0000                label:                                      ; body
0000                .endm
0000                 
0000                .macro CODE,name,label
0000                             ; 
0000                 _CODE name, 0, label
0000                .endm
0000                 
0000                .macro ICODE,name,label
0000                             ; 
0000                 _CODE name, IMMED, label
0000                .endm
0000                 
0000                .macro CONST,name,label,value
0000                             ; 
0000                 CODE name, label
0000                 call dup
0000                 ld BC, value
0000                 ret
0000                .endm
0000                 
0000                .macro VAR,name,label,variable
0000                             ; 
0000                 CONST name, label, variable
0000                .endm
0000                 
0000                             ; IX = RTOS
0000                             ; BC = RP
0000                             ; HL = TOS
0000                .macro _INITKERNEL,
0000                             ; 
0000                 push IX
0000                 ld SP,dStack
0000                 ld BC,rStack
0000                 _push FALSE
0000                 _store state
0000                 _push 10
0000                 _store base
0000                 _fetch0 initialLatest
0000                 _store latest
0000                 _push START_USER
0000                 _store here
0000                 jp (IX)
0000                .endm
0000                 
0000                .macro ENTER,
0000                             ; 
0000                 _TDROP			; 10t	; x y 				T: a
0000                 _RPUSH H,L		; 34t	; x y    	R: a	
0000                .endm
0000                 
0000                .macro EXIT,
0000                             ; 
0000                	_RPOP H,L			; 34t			R: 		T: a
0000                	JP (HL)			    ; 4t;
0000                .endm
0000                 
0000                             ; BC = RP
0000                             ; DE = TOS
0000                             ; HL = T (H = TH, L = TL)
0000                             ; (SP) = NOS
0000                .macro _RPEEK0,hi,lo
0000                             ; 
0000                	LD A,(BC)			        ; 7t
0000                 LD lo,A			            ; 4t
0000                 INC BC			            ; 6t
0000                 LD A,(BC)			        ; 7t
0000                 LD hi,A			            ; 4t
0000                .endm
0000                 
0000                .macro _RPEEK,hi,lo
0000                             ; 
0000                	_rpeek0 hi,lo			    ; 28t
0000                 DEC BC			            ; 6t
0000                .endm
0000                 
0000                .macro _RPUSH,hi,lo
0000                             ; 
0000                 DEC BC			            ; 6t
0000                 LD A,lo			            ; 4t
0000                 LD (BC),A			        ; 7t
0000                 DEC BC			            ; 6t
0000                 LD A,hi			            ; 4t
0000                 LD (BC),A			        ; 7t
0000                .endm
0000                 
0000                .macro _RPOP,hi,lo
0000                             ; 
0000                	_RPEEK0 hi,lo			    ; 28t
0000                 INC BC			            ; 6t
0000                .endm
0000                 
0000                .macro _UNNIP,
0000                             ; 
0000                	DEC SP	
0000                 DEC SP	
0000                .endm
0000                 
0000                .macro _TWOUNNIP,
0000                             ; 
0000                	_unnip	
0000                 _unnip	
0000                .endm
0000                 
0000                .macro _FROMT,
0000                             ; 
0000                	_dup			        ; 11t
0000                	EX DE,HL			        ; 4t
0000                .endm
0000                 
0000                .macro _TOT,
0000                             ; 
0000                 ex DE,HL		
0000                 POP DE		
0000                .endm
0000                 
0000                             ; 
0000                .macro _TDUP,
0000                             ; 
0000                 PUSH HL
0000                .endm
0000                 
0000                .macro _TDROP,
0000                             ; 
0000                 POP HL
0000                .endm
0000                 
0000                .macro _XTOS,
0000                             ; 
0000                 EX DE,HL
0000                .endm
0000                 
0000                .macro _XNOS,
0000                             ; 
0000                 EX(SP),HL
0000                .endm
0000                 
0000                .macro _DUP,
0000                             ; 
0000                 PUSH DE			; 11t
0000                .endm
0000                 
0000                .macro _DROP,
0000                             ; 
0000                 POP DE			; 10t
0000                .endm
0000                 
0000                .macro _SWAP,
0000                             ; 
0000                 _toT			; 14t			x1			T: x2
0000                 PUSH HL			; 11t			x2 x1
0000                .endm
0000                 
0000                .macro _OVER,
0000                             ; 
0000                 POP HL			; 10t		x2			T: x1
0000                 PUSH HL			; 11t			x1 x2			T: x1
0000                 _Tfrom			; 14t                		x1 x2 x1
0000                .endm
0000                 
0000                .macro _NIP,
0000                             ; 
0000                 INC SP			; 6t
0000                 INC SP			; 6t
0000                .endm
0000                 
0000                .macro _TUCK,
0000                             ; 
0000                	_swap				; 25t
0000                 _over				; 35t
0000                .endm
0000                 
0000                .macro _ROT,
0000                             ; 
0000                 _toT			; 14t			x1 x2			T: x3
0000                 EX DE,HL			; 4t			x1 x3 			T: x2
0000                 EX(SP),HL			; 20t			x2 x3 			T: x1
0000                 _Tfrom			; 14t			x2 x3 x1
0000                .endm
0000                 
0000                .macro _CBANG,
0000                             ; 
0000                	_toT				; 14t
0000                 LD (HL),E			; 7t
0000                	_drop				; 10t
0000                .endm
0000                 
0000                .macro _AT,
0000                             ; 
0000                 EX DE,HL			; 4t
0000                 LD E,(HL)			; 7t
0000                	INC HL			; 6t
0000                 LD D,(HL)			; 7t
0000                .endm
0000                 
0000                .macro _BANG,
0000                             ; 
0000                	_toT				; 14t
0000                 LD (HL),E			; 7
0000                	INC HL			; 6
0000                 LD (HL),D			; 7
0000                .endm
0000                 
0000                .macro _TWODUP,
0000                             ; 
0000                 POP HL			; 10t		; x2				T: x1
0000                 PUSH HL			; 11t			; x1 x2				T: x1
0000                	_dup				; 11t		; x1 x2 x2			T: x1
0000                	PUSH HL			; 11t			; x1 x2 x1 x2
0000                .endm
0000                 
0000                .macro _TWODROP,
0000                             ; 
0000                 _drop				; 10t
0000                	_drop				; 10t
0000                .endm
0000                 
0000                .macro _TWOSWAP,
0000                             ; 
0000                 _toT			; 14			x1 x2 x3			T x4
0000                 EX(SP),HL			; 19			x1 x4 x3			T x2
0000                 _nip			; 12			x1 x3		N x4   		T x2
0000                 EX DE,HL			; 4			x1 x2               		T x3
0000                 EX(SP),HL			; 19			x3 x2				T x1
0000                 EX DE,HL			; 4			x3 x1				T x2
0000                 UNnip			; 12			x3 x4 x1			T x1
0000                 _Tfrom			; 14			x3 x4 x1 x2
0000                .endm
0000                 
0000                .macro _TWOOVER,
0000                             ; 
0000                 _dup				; 11t		x1 x2 x3 x4 x4
0000                	_twoNip				; 24t		x1 x2 x4	      N: x3 x4
0000                	_drop				; 10t		x1 x2	                  N: x2 x3 x4
0000                	POP HL			; 10t		x2		      N: x1 x2 x3 x4  T = x1
0000                 _twoUnnip			; 24t		x1 x2 x2   	      N: x3 x4            T = x1
0000                	_twoUnnip			; 24t		x1 x2 x3 x4 x2                                T = x1
0000                 PUSH HL			; 11t			x1 x2 x3 x4 x1 x2	
0000                .endm
0000                 
0000                .macro _TWOAT,
0000                             ; 
0000                	_dup				; 11t
0000                	_cellPlus				; 11t
0000                	_at				; 20t
0000                	_swap				; 19t
0000                	_at				; 20t
0000                .endm
0000                 
0000                .macro _TWOBANG,
0000                             ; 
0000                	_swap				; 19t		x a y
0000                	_over				; 16t		x a y a
0000                	_bang			; 46t		x a
0000                	_cellPlus				; 12t		x a+1
0000                	_bang			; 46t
0000                .endm
0000                 
0000                .macro _PLUS,
0000                             ; 
0000                 _toT
0000                 add HL,DE
0000                 ex DE,HL
0000                .endm
0000                 
0000                .macro _MINUS,
0000                             ; 
0000                 _TDROP
0000                 or A
0000                 sbc HL,DE
0000                 ex DE,HL
0000                .endm
0000                 
0000                .macro _CELLPLUS,
0000                             ; 
0000                 inc DE
0000                 inc DE
0000                .endm
0000                 
0000                .macro _ONEPLUS,
0000                             ; 
0000                 inc DE
0000                .endm
0000                 
0000                .macro _ONEMINUS,
0000                             ; 
0000                 dec DE
0000                .endm
0000                 
0000                .macro _ISZERO,
0000                             ; 
0000                 ld A, E
0000                 or D
0000                 _drop
0000                .endm
0000                 
0000                .macro _PUSH,src
0000                             ; 
0000                 _dup
0000                 ld DE, src
0000                .endm
0000                 
0000                .macro _POP,dest
0000                             ; 
0000                 ld dest, DE
0000                 _drop
0000                .endm
0000                 
0000                .macro _PUSHC,src
0000                             ; 
0000                 _dup
0000                 ld E, src
0000                 ld D,0
0000                .endm
0000                 
0000                .macro _FETCH0,name
0000                             ; 
0000                 _push name
0000                 _at
0000                .endm
0000                 
0000                .macro _STORE0,name
0000                             ; 
0000                 _push name
0000                 _bang
0000                .endm
0000                 
0000                .macro _FETCH,name
0000                             ; 
0000                 _push var_name
0000                 _at
0000                .endm
0000                 
0000                .macro _STORE,name
0000                             ; 
0000                 _push var_name
0000                 _bang
0000                .endm
0000                 
0000                .macro _PRINTSTRING,s1
0000                             ; 
0000                 _pushString s1
0000                 call printStr
0000                .endm
0000                 
0000                .macro _PUSHSTRING,s1
0000                             ; 
0000                 call litString
0000                 .pstr s1
0000                .endm
0000                 
0000                          .ORG   START_ROM   
0000                RST00:       ; Reset
0000   F3                     DI      ; Disable interrupts
0001   C3 36 02               JP   start   
0008                          .ORG   $0008   
0008                RST08:       ; rst 38
0008   C9                     RET      
0038                          .ORG   $0038   
0038                RST38:       ; rst 38
0038   C3 33 01               JP   serialIn   
003B                INITKERNEL:      
003B   DD E1                  POP   IX   
003D                          ;*Macro unroll:  _initKernel
003D   DD E5                  PUSH   IX   
003F   31 80 20               LD   SP,dStack   
0042   01 00 21               LD   BC,rStack   
0045                          ;*Macro unroll:  _push FALSE
0045                          ;*Macro unroll:  _dup
0045   D5                     PUSH   DE   
0046   11 00 00               LD   DE,FALSE   
0049                          ;*Macro unroll:  _store state
0049                          ;*Macro unroll:  _push var_state
0049                          ;*Macro unroll:  _dup
0049   D5                     PUSH   DE   
004A   11 53 22               LD   DE,var_state   
004D                          ;*Macro unroll:  _bang
004D                          ;*Macro unroll: 	_toT				; 14t
004D   EB                     EX   DE,HL   ; 14t
004E   D1                     POP   DE   
004F   73                     LD   (HL),E   
0050   23                     INC   HL   
0051   72                     LD   (HL),D   
0052                          ;*Macro unroll:  _push 10
0052                          ;*Macro unroll:  _dup
0052   D5                     PUSH   DE   
0053   11 0A 00               LD   DE,10   
0056                          ;*Macro unroll:  _store base
0056                          ;*Macro unroll:  _push var_base
0056                          ;*Macro unroll:  _dup
0056   D5                     PUSH   DE   
0057   11 4D 22               LD   DE,var_base   
005A                          ;*Macro unroll:  _bang
005A                          ;*Macro unroll: 	_toT				; 14t
005A   EB                     EX   DE,HL   ; 14t
005B   D1                     POP   DE   
005C   73                     LD   (HL),E   
005D   23                     INC   HL   
005E   72                     LD   (HL),D   
005F                          ;*Macro unroll:  _fetch0 initialLatest
005F                          ;*Macro unroll:  _push initialLatest
005F                          ;*Macro unroll:  _dup
005F   D5                     PUSH   DE   
0060   11 34 02               LD   DE,initialLatest   
0063                          ;*Macro unroll:  _at
0063                          ;*Macro unroll:  EX DE,HL			; 4t
0063   EB                     EX   DE,HL   ; 4t
0064   5E                     LD   E,(HL)   
0065   23                     INC   HL   
0066   56                     LD   D,(HL)   
0067                          ;*Macro unroll:  _store latest
0067                          ;*Macro unroll:  _push var_latest
0067                          ;*Macro unroll:  _dup
0067   D5                     PUSH   DE   
0068   11 51 22               LD   DE,var_latest   
006B                          ;*Macro unroll:  _bang
006B                          ;*Macro unroll: 	_toT				; 14t
006B   EB                     EX   DE,HL   ; 14t
006C   D1                     POP   DE   
006D   73                     LD   (HL),E   
006E   23                     INC   HL   
006F   72                     LD   (HL),D   
0070                          ;*Macro unroll:  _push START_USER
0070                          ;*Macro unroll:  _dup
0070   D5                     PUSH   DE   
0071   11 81 22               LD   DE,START_USER   
0074                          ;*Macro unroll:  _store here
0074                          ;*Macro unroll:  _push var_here
0074                          ;*Macro unroll:  _dup
0074   D5                     PUSH   DE   
0075   11 4F 22               LD   DE,var_here   
0078                          ;*Macro unroll:  _bang
0078                          ;*Macro unroll: 	_toT				; 14t
0078   EB                     EX   DE,HL   ; 14t
0079   D1                     POP   DE   
007A   73                     LD   (HL),E   
007B   23                     INC   HL   
007C   72                     LD   (HL),D   
007D   DD E9                  JP   (IX)   
007F   DD E9                  JP   (IX)   
0081                          ;*Macro unroll: CODE 'c@',cat                                 ; ptr -- n
0081                          ;*Macro unroll:  _CODE "c@", 0, cat
0081                HEADER_CAT:      
0081   00 00                  DW   backLink   
0083                BACKLINK:   .SET   HEADER_cat   
0083   00                     DB   0   
0084   02 63 40               .PSTR   "c@"   
0087                CAT:         
0087                          ;*Macro unroll:  ENTER
0087                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
0087   E1                     POP   HL   ; 10t	; x y 				T: a
0088                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
0088   0B                     DEC   BC   ; 34t	; x y    	R: a	
0089   7D                     LD   A,L   
008A   02                     LD   (BC),A   
008B   0B                     DEC   BC   
008C   7C                     LD   A,H   
008D   02                     LD   (BC),A   
008E   60 69                  LD   HL,BC   
0090   4E                     LD   C,(HL)   
0091   06 00                  LD   B,0   
0093                          ;*Macro unroll:  EXIT
0093                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
0093                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
0093   0A                     LD   A,(BC)   ; 28t
0094   6F                     LD   L,A   
0095   03                     INC   BC   
0096   0A                     LD   A,(BC)   
0097   67                     LD   H,A   
0098   03                     INC   BC   ; 34t			R: 		T: a
0099   E9                     JP   (HL)   
009A                          ;*Macro unroll: CODE 'c!',cstore                              ; n ptr --
009A                          ;*Macro unroll:  _CODE "c!", 0, cstore
009A                HEADER_CSTORE:      
009A   81 00                  DW   backLink   
009C                BACKLINK:   .SET   HEADER_cstore   
009C   00                     DB   0   
009D   02 63 21               .PSTR   "c!"   
00A0                CSTORE:      
00A0                          ;*Macro unroll:  ENTER
00A0                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
00A0   E1                     POP   HL   ; 10t	; x y 				T: a
00A1                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
00A1   0B                     DEC   BC   ; 34t	; x y    	R: a	
00A2   7D                     LD   A,L   
00A3   02                     LD   (BC),A   
00A4   0B                     DEC   BC   
00A5   7C                     LD   A,H   
00A6   02                     LD   (BC),A   
00A7   60 69                  LD   HL,BC   
00A9                          ;*Macro unroll:  _drop
00A9   D1                     POP   DE   
00AA   71                     LD   (HL),C   
00AB                          ;*Macro unroll:  _drop
00AB   D1                     POP   DE   
00AC                          ;*Macro unroll:  EXIT
00AC                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
00AC                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
00AC   0A                     LD   A,(BC)   ; 28t
00AD   6F                     LD   L,A   
00AE   03                     INC   BC   
00AF   0A                     LD   A,(BC)   
00B0   67                     LD   H,A   
00B1   03                     INC   BC   ; 34t			R: 		T: a
00B2   E9                     JP   (HL)   
00B3                             ; ! ( a -- n )
00B3                          ;*Macro unroll: CODE "@",at
00B3                          ;*Macro unroll:  _CODE "@", 0, at
00B3                HEADER_AT:      
00B3   9A 00                  DW   backLink   
00B5                BACKLINK:   .SET   HEADER_at   
00B5   00                     DB   0   
00B6   01 40                  .PSTR   "@"   
00B8                AT:          
00B8                          ;*Macro unroll:  ENTER
00B8                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
00B8   E1                     POP   HL   ; 10t	; x y 				T: a
00B9                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
00B9   0B                     DEC   BC   ; 34t	; x y    	R: a	
00BA   7D                     LD   A,L   
00BB   02                     LD   (BC),A   
00BC   0B                     DEC   BC   
00BD   7C                     LD   A,H   
00BE   02                     LD   (BC),A   
00BF   5E                     LD   E,(HL)   
00C0   23                     INC   HL   
00C1   56                     LD   D,(HL)   
00C2   EB                     EX   DE,HL   
00C3                          ;*Macro unroll:  EXIT
00C3                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
00C3                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
00C3   0A                     LD   A,(BC)   ; 28t
00C4   6F                     LD   L,A   
00C5   03                     INC   BC   
00C6   0A                     LD   A,(BC)   
00C7   67                     LD   H,A   
00C8   03                     INC   BC   ; 34t			R: 		T: a
00C9   E9                     JP   (HL)   
00CA                             ; ! ( n a -- )
00CA                          ;*Macro unroll: CODE "!",store
00CA                          ;*Macro unroll:  _CODE "!", 0, store
00CA                HEADER_STORE:      
00CA   B3 00                  DW   backLink   
00CC                BACKLINK:   .SET   HEADER_store   
00CC   00                     DB   0   
00CD   01 21                  .PSTR   "!"   
00CF                STORE:       
00CF                          ;*Macro unroll:  ENTER
00CF                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
00CF   E1                     POP   HL   ; 10t	; x y 				T: a
00D0                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
00D0   0B                     DEC   BC   ; 34t	; x y    	R: a	
00D1   7D                     LD   A,L   
00D2   02                     LD   (BC),A   
00D3   0B                     DEC   BC   
00D4   7C                     LD   A,H   
00D5   02                     LD   (BC),A   
00D6   EB                     EX   DE,HL   ; DE = a
00D7                          ;*Macro unroll:  _drop           ; HL = n
00D7   D1                     POP   DE   ; HL = n
00D8   EB                     EX   DE,HL   ; HL = a  DE = n
00D9   73                     LD   (HL),E   
00DA   23                     INC   HL   
00DB   72                     LD   (HL),D   ; rp a+1
00DC                          ;*Macro unroll:  _drop
00DC   D1                     POP   DE   
00DD                          ;*Macro unroll:  EXIT
00DD                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
00DD                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
00DD   0A                     LD   A,(BC)   ; 28t
00DE   6F                     LD   L,A   
00DF   03                     INC   BC   
00E0   0A                     LD   A,(BC)   
00E1   67                     LD   H,A   
00E2   03                     INC   BC   ; 34t			R: 		T: a
00E3   E9                     JP   (HL)   
00E4                          ;*Macro unroll: CODE "emit", emit                            ; --
00E4                          ;*Macro unroll:  _CODE "emit", 0, emit
00E4                HEADER_EMIT:      
00E4   CA 00                  DW   backLink   
00E6                BACKLINK:   .SET   HEADER_emit   
00E6   00                     DB   0   
00E7   04 65 6D 69 74         .PSTR   "emit"   
00EC                EMIT:        
00EC   DD E1                  POP   IX   
00EE   79                     LD   A,C   
00EF   CD 6F 01               CALL   putc   
00F2                          ;*Macro unroll:  _drop
00F2   D1                     POP   DE   
00F3   DD E9                  JP   (IX)   
00F5                          ;*Macro unroll: CODE ".", dot
00F5                          ;*Macro unroll:  _CODE ".", 0, dot
00F5                HEADER_DOT:      
00F5   E4 00                  DW   backLink   
00F7                BACKLINK:   .SET   HEADER_dot   
00F7   00                     DB   0   
00F8   01 2E                  .PSTR   "."   
00FA                DOT:         
00FA                          ;*Macro unroll:  ENTER
00FA                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
00FA   E1                     POP   HL   ; 10t	; x y 				T: a
00FB                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
00FB   0B                     DEC   BC   ; 34t	; x y    	R: a	
00FC   7D                     LD   A,L   
00FD   02                     LD   (BC),A   
00FE   0B                     DEC   BC   
00FF   7C                     LD   A,H   
0100   02                     LD   (BC),A   
0101                          ;*Macro unroll:  _isZero
0101   7B                     LD   A,E   
0102   B2                     OR   D   
0103                          ;*Macro unroll:  _drop
0103   D1                     POP   DE   
0104   28 07                  JR   z,dot1   
0106                          ;*Macro unroll:  _pushc "0"
0106                          ;*Macro unroll:  _dup
0106   D5                     PUSH   DE   
0107   1E 30                  LD   E,"0"   
0109   16 00                  LD   D,0   
010B   18 05                  JR   dot2   
010D                DOT1:        
010D                          ;*Macro unroll:  _pushc "?"
010D                          ;*Macro unroll:  _dup
010D   D5                     PUSH   DE   
010E   1E 3F                  LD   E,"?"   
0110   16 00                  LD   D,0   
0112                DOT2:        
0112   CD EC 00               CALL   emit   
0115                          ;*Macro unroll:  EXIT
0115                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
0115                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
0115   0A                     LD   A,(BC)   ; 28t
0116   6F                     LD   L,A   
0117   03                     INC   BC   
0118   0A                     LD   A,(BC)   
0119   67                     LD   H,A   
011A   03                     INC   BC   ; 34t			R: 		T: a
011B   E9                     JP   (HL)   
011C                             ; ; DE = TOS
011C                             ; ; T. (x -- )
011C                             ; ; report the test number to a numeric output device
011C                             ; CODE "T.",tesDot
011C                             ;     ENTER
011C                             ;     jr z, tesDot1
011C                             ;     _push $58
011C                             ;     call emit
011C                             ;     EXIT
011C                             ; tesDot1:
011C                             ;     _push $4F
011C                             ;     call emit
011C                             ;     EXIT
011C                             ; ; hasn ( x1 h0 -- h1 )
011C                             ; ; compute h1 by hashing x1 and h0
011C                             ; CODE "hash",testHash
011C                             ;     ENTER
011C                             ;     _swap
011C                             ;     _onePlus
011C                             ;     call xorr
011C                             ;     EXIT
011C                             ; ; hash-n ( x1 x2 ... xn n -- h )
011C                             ; ; hash n items from the stack and return the hash code
011C                             ; CODE "hash-n",tesHashN
011C                             ;     ENTER
011C                             ;     _push 0
011C                             ;     _toR
011C                             ; tesHashN1:
011C                             ;     _dup
011C                             ;     _isZero
011C                             ;     jr z,tesHashN2
011C                             ;     _swap
011C                             ;     _rFrom
011C                             ;     call tesHash
011C                             ;     _toR
011C                             ;     _oneMinus
011C                             ;     jr tesHashN1
011C                             ; tesHashN2:
011C                             ;     _drop
011C                             ;     _rFrom
011C                             ;     EXIT
011C                             ; ; Tstart ( -- )
011C                             ; ; start testing
011C                             ; CODE "Tstart",tesStart
011C                             ;     ENTER
011C                             ;     _push 0
011C                             ;     _store tesCount
011C                             ;     EXIT
011C                             ; ; T{ ( -- )
011C                             ; ; start a unit test
011C                             ; ;  Tcount @ 1+ dup T. Tcount !
011C                             ; ;  depth Tdepth !
011C                             ; CODE "T{",tesEnter
011C                             ;     ENTER
011C                             ;     _fetch testCnt
011C                             ;     _onePlus
011C                             ;     _dup
011C                             ;     call tesDot
011C                             ;     _store tesCount
011C                             ;     call depth
011C                             ;     _store tesDepth
011C                             ;     EXIT
011C                             ; ; }T ( y1 y2 ... yn -- hy )
011C                             ; ; finish a unit test,
011C                             ; CODE "}T",tesExit
011C                             ;     ENTER
011C                             ;     call depth
011C                             ;     _fetch tesDepth
011C                             ;     call minus
011C                             ;     call tesHashN
011C                             ;     call depth
011C                             ;     _store tesDepth
011C                             ;     EXIT
011C                             ; ; == ( hy x1 x2 ... xn -- )
011C                             ; ; compare actual output with expected output
011C                             ; CODE "==",tesEQ
011C                             ;     ENTER
011C                             ;     call depth
011C                             ;     _fetch tesDepth
011C                             ;     call minus
011C                             ;     call tesHashN
011C                             ;     call equal
011C                             ;     _isZero
011C                             ;     jr z,tesQ1
011C                             ;     halt
011C                             ; tesQ1:
011C                             ;     EXIT
011C                             ; ; Tend ( -- )
011C                             ; ; signal end of testing
011C                             ; CODE "Tend",tesEnd
011C                             ;     ENTER
011C                             ;     _push -1
011C                             ;     call tesDot
011C                             ;     EXIT
011C                SER_EMPTYSIZE:   EQU   5   
011C                SER_FULLSIZE:   EQU   30H   
011C                IO_CTRL:   EQU   $80   
011C                IO_DATA:   EQU   $81   
011C                RTS_HIGH:   EQU   $D6   ; 11010110
011C                RTS_LOW:   EQU   $96   ; 10010110
011C                PORT_STATUS:   EQU   $04   
011C                PORT_DATA:   EQU   $03   
011C                             ; destroys: HL
011C                INITSERIAL:      
011C   21 00 00               LD   HL,0   
011F   22 04 21               LD   (serbufused),HL   
0122   21 06 21               LD   HL,serbuf   
0125   22 00 21               LD   (serinptr),HL   
0128   22 02 21               LD   (serrdptr),HL   
012B   3E 96                  LD   A,RTS_LOW   
012D   D3 80                  OUT   (IO_CTRL),A   
012F   ED 56                  IM   1   
0131   FB                     EI      
0132   C9                     RET      
0133                SERIALIN:      
0133   F5                     PUSH   AF   
0134   E5                     PUSH   HL   
0135   DB 80                  IN   A,(IO_CTRL)   
0137   E6 01                  AND   $01   
0139   28 05                  JR   z,serialIn1   
013B   DB 81                  IN   A,(IO_DATA)   
013D   CD 44 01               CALL   serialIn2   
0140                SERIALIN1:      
0140   E1                     POP   HL   
0141   F1                     POP   AF   
0142   FB                     EI      
0143   C9                     RET      
0144                             ; destroys: HL
0144                SERIALIN2:      
0144   F5                     PUSH   AF   
0145   3A 04 21               LD   A,(serBufUsed)   
0148   FE 3F                  CP   SER_BUFSIZE   
014A   20 02                  JR   nz,serialIn21   
014C   F1                     POP   AF   
014D   C9                     RET      
014E                SERIALIN21:      
014E   2A 00 21               LD   HL,(serInPtr)   
0151   23                     INC   HL   
0152   7D                     LD   A,L   ; Only need to check low byte becasuse lineBuf<256 bytes
0153   FE 45                  CP   (serBuf + SER_BUFSIZE) & $FF   
0155   20 03                  JR   nz,serialIn22   
0157   21 06 21               LD   HL,serBuf   
015A                SERIALIN22:      
015A   22 00 21               LD   (serInPtr),HL   
015D   F1                     POP   AF   
015E   77                     LD   (HL),A   
015F   3A 04 21               LD   A,(serBufUsed)   
0162   3C                     INC   A   
0163   32 04 21               LD   (serBufUsed),A   
0166   FE 30                  CP   SER_FULLSIZE   
0168   38 04                  JR   c,serialIn23   
016A   3E D6                  LD   A,RTS_HIGH   
016C   D3 80                  OUT   (IO_CTRL),A   
016E                SERIALIN23:      
016E   C9                     RET      
016F                             ; 
016F                             ; putc - output a character
016F                             ; params: A = char to output
016F                             ; 
016F                PUTC:        
016F   F5                     PUSH   AF   ; Store character
0170                PUTC0:       
0170   DB 80                  IN   A,(IO_CTRL)   ; Status byte
0172   CB 4F                  BIT   1,A   ; Set Zero flag if still transmitting character
0174   28 FA                  JR   z,putc0   
0176   F1                     POP   AF   ; Retrieve character
0177   D3 81                  OUT   (IO_DATA),A   ; Output the character
0179   C9                     RET      
017A                             ; 
017A                             ; serReady - check if there is input waiting to be read
017A                             ; flags: NZ if input ready
017A                             ; 
017A                SERREADY:      
017A   3A 04 21               LD   A,(serBufUsed)   
017D   FE 00                  CP   $0   
017F   C9                     RET      
0180                             ; 
0180                             ; getc - input
0180                             ; returns: A = input char
0180                             ; 
0180                GETC:        
0180   E5                     PUSH   HL   
0181                          IF   TESTMODE   
0181   2A 55 22               LD   HL,(charPtr)   
0184   7E                     LD   A,(HL)   
0185   23                     INC   HL   
0186   22 55 22               LD   (charPtr),HL   
0189                          ELSE      
                    GETC0:       
                              CALL   serReady   
                              JR   z,getc0   
                              LD   HL,(serRdPtr)   
                              INC   HL   
                              LD   A,L   ; Only need to check low byte because lineBuf<256 bytes
                              CP   (serBuf + SER_BUFSIZE) & $FF   
                              JR   nz,getc21   
                              LD   HL,serBuf   
                    GETC21:      
                              DI      
                              LD   (serRdPtr),HL   
                              LD   A,(serBufUsed)   
                              DEC   A   
                              LD   (serBufUsed),A   
                              CP   SER_EMPTYSIZE   
                              JR   nc,getc22   
                              LD   A,RTS_LOW   
                              OUT   (IO_CTRL),A   
                    GETC22:      
                              LD   A,(HL)   
                              EI      
0189                          ENDIF      
0189   E1                     POP   HL   
018A   C9                     RET      
018B                             ; BC = RP
018B                             ; HL = TOS
018B                TOR:         
018B   DD E1                  POP   IX   
018D                          ;*Macro unroll:  _RPUSH D,E		; 34t		x		R: x
018D   0B                     DEC   BC   ; 34t		x		R: x
018E   7B                     LD   A,E   
018F   02                     LD   (BC),A   
0190   0B                     DEC   BC   
0191   7A                     LD   A,D   
0192   02                     LD   (BC),A   
0193                          ;*Macro unroll: 	_DROP			; 10t				R: x
0193   D1                     POP   DE   ; 10t				R: x
0194   DD E9                  JP   (IX)   
0196                RFROM:       
0196   DD E1                  POP   IX   
0198                          ;*Macro unroll: 	_dup			; 11t			
0198   D5                     PUSH   DE   ; 11t			
0199                          ;*Macro unroll:  _RPOP	D,E		; 34t		x 		
0199                          ;*Macro unroll: 	_RPEEK0 D,E			    ; 28t
0199   0A                     LD   A,(BC)   ; 28t
019A   5F                     LD   E,A   
019B   03                     INC   BC   
019C   0A                     LD   A,(BC)   
019D   57                     LD   D,A   
019E   03                     INC   BC   ; 34t		x 		
019F   DD E9                  JP   (IX)   
01A1                RAT:         
01A1   DD E1                  POP   IX   
01A3                          ;*Macro unroll: 	_dup				; 11
01A3   D5                     PUSH   DE   ; 11
01A4                          ;*Macro unroll:  _RPEEK D,E		; 34t				R: x		T x
01A4                          ;*Macro unroll: 	_rpeek0 D,E			    ; 28t
01A4   0A                     LD   A,(BC)   ; 28t
01A5   5F                     LD   E,A   
01A6   03                     INC   BC   
01A7   0A                     LD   A,(BC)   
01A8   57                     LD   D,A   
01A9   0B                     DEC   BC   ; 34t				R: x		T x
01AA   DD E9                  JP   (IX)   
01AC                TWOTOR:      ; d --
01AC                          ;*Macro unroll:  ENTER
01AC                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
01AC   E1                     POP   HL   ; 10t	; x y 				T: a
01AD                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
01AD   0B                     DEC   BC   ; 34t	; x y    	R: a	
01AE   7D                     LD   A,L   
01AF   02                     LD   (BC),A   
01B0   0B                     DEC   BC   
01B1   7C                     LD   A,H   
01B2   02                     LD   (BC),A   
01B3                          ;*Macro unroll:  _swap			
01B3                          ;*Macro unroll:  _toT			; 14t			x1			T: x2
01B3   EB                     EX   DE,HL   ; 14t			x1			T: x2
01B4   D1                     POP   DE   
01B5                          ;*Macro unroll:  PUSH HL			; 11t			x2 x1
01B5   E5                     PUSH   HL   ; 11t			x2 x1
01B6   CD 8B 01               CALL   toR   
01B9   CD 8B 01               CALL   toR   
01BC                          ;*Macro unroll:  EXIT
01BC                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
01BC                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
01BC   0A                     LD   A,(BC)   ; 28t
01BD   6F                     LD   L,A   
01BE   03                     INC   BC   
01BF   0A                     LD   A,(BC)   
01C0   67                     LD   H,A   
01C1   03                     INC   BC   ; 34t			R: 		T: a
01C2   E9                     JP   (HL)   
01C3                TWORFROM:      ; -- d
01C3                          ;*Macro unroll:  ENTER
01C3                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
01C3   E1                     POP   HL   ; 10t	; x y 				T: a
01C4                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
01C4   0B                     DEC   BC   ; 34t	; x y    	R: a	
01C5   7D                     LD   A,L   
01C6   02                     LD   (BC),A   
01C7   0B                     DEC   BC   
01C8   7C                     LD   A,H   
01C9   02                     LD   (BC),A   
01CA   CD 96 01               CALL   rFrom   
01CD   CD 96 01               CALL   rFrom   
01D0                          ;*Macro unroll:  _swap		
01D0                          ;*Macro unroll:  _toT			; 14t			x1			T: x2
01D0   EB                     EX   DE,HL   ; 14t			x1			T: x2
01D1   D1                     POP   DE   
01D2                          ;*Macro unroll:  PUSH HL			; 11t			x2 x1
01D2   E5                     PUSH   HL   ; 11t			x2 x1
01D3                          ;*Macro unroll:  EXIT
01D3                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
01D3                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
01D3   0A                     LD   A,(BC)   ; 28t
01D4   6F                     LD   L,A   
01D5   03                     INC   BC   
01D6   0A                     LD   A,(BC)   
01D7   67                     LD   H,A   
01D8   03                     INC   BC   ; 34t			R: 		T: a
01D9   E9                     JP   (HL)   
01DA                TWORAT:      ; a b -- a b x y  	R: x y
01DA                          ;*Macro unroll:  ENTER
01DA                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
01DA   E1                     POP   HL   ; 10t	; x y 				T: a
01DB                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
01DB   0B                     DEC   BC   ; 34t	; x y    	R: a	
01DC   7D                     LD   A,L   
01DD   02                     LD   (BC),A   
01DE   0B                     DEC   BC   
01DF   7C                     LD   A,H   
01E0   02                     LD   (BC),A   
01E1   CD 96 01               CALL   rFrom   ; 44t		a b y 		R: x
01E4   CD A1 01               CALL   rAt   ; 44t		a b y x		R: x		T: x
01E7                          ;*Macro unroll:  _swap           ; 20t		a b x y
01E7                          ;*Macro unroll:  _toT			; 14t			x1			T: x2
01E7   EB                     EX   DE,HL   ; 14t			x1			T: x2
01E8   D1                     POP   DE   
01E9                          ;*Macro unroll:  PUSH HL			; 11t			x2 x1
01E9   E5                     PUSH   HL   ; 11t			x2 x1
01EA                          ;*Macro unroll:  _dup            ; 10t		a b x y y	R: x
01EA   D5                     PUSH   DE   ; 10t		a b x y y	R: x
01EB   CD 8B 01               CALL   toR   ; 45t		a b x y		R: x y
01EE                          ;*Macro unroll:  EXIT
01EE                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
01EE                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
01EE   0A                     LD   A,(BC)   ; 28t
01EF   6F                     LD   L,A   
01F0   03                     INC   BC   
01F1   0A                     LD   A,(BC)   
01F2   67                     LD   H,A   
01F3   03                     INC   BC   ; 34t			R: 		T: a
01F4   E9                     JP   (HL)   
01F5                             ;      -- c-addr u
01F5                             ; is followed by a literal Packed (Pascal) string
01F5                LITSTRING:      
01F5                          ;*Macro unroll:  ENTER
01F5                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
01F5   E1                     POP   HL   ; 10t	; x y 				T: a
01F6                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
01F6   0B                     DEC   BC   ; 34t	; x y    	R: a	
01F7   7D                     LD   A,L   
01F8   02                     LD   (BC),A   
01F9   0B                     DEC   BC   
01FA   7C                     LD   A,H   
01FB   02                     LD   (BC),A   
01FC   CD 96 01               CALL   rFrom   ; addr
01FF   CD 1D 02               CALL   count   ; addr+1 len
0202                          ;*Macro unroll:  _twoDup             ; addr+1 len addr+1 len
0202                          ;*Macro unroll:  POP HL			; 10t		; x2				T: x1
0202   E1                     POP   HL   ; 10t		; x2				T: x1
0203                          ;*Macro unroll:  PUSH HL			; 11t			; x1 x2				T: x1
0203   E5                     PUSH   HL   ; 11t			; x1 x2				T: x1
0204                          ;*Macro unroll: 	_dup				; 11t		; x1 x2 x2			T: x1
0204   D5                     PUSH   DE   ; 11t		; x1 x2 x2			T: x1
0205                          ;*Macro unroll: 	PUSH HL			; 11t			; x1 x2 x1 x2
0205   E5                     PUSH   HL   ; 11t			; x1 x2 x1 x2
0206                          ;*Macro unroll:  _plus               ; addr+1 len addr+len+1
0206                          ;*Macro unroll:  _toT
0206   EB                     EX   DE,HL   
0207   D1                     POP   DE   
0208   19                     ADD   HL,DE   ; addr+1 len addr+len+1
0209   EB                     EX   DE,HL   
020A   CD 8B 01               CALL   toR   ; addr+1 len
020D                          ;*Macro unroll:  EXIT                ; TODO: optimise to LD HL,BC jp (HL)
020D                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
020D                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
020D   0A                     LD   A,(BC)   ; 28t
020E   6F                     LD   L,A   
020F   03                     INC   BC   
0210   0A                     LD   A,(BC)   
0211   67                     LD   H,A   
0212   03                     INC   BC   ; 34t			R: 		T: a
0213   E9                     JP   (HL)   ; TODO: optimise to LD HL,BC jp (HL)
0214                             ;   COUNT       ( b -- b +n )
0214                             ;               Return count byte of a string and add 1 to byte address.
0214                          ;*Macro unroll: CODE 'COUNT',count
0214                          ;*Macro unroll:  _CODE "COUNT", 0, count
0214                HEADER_COUNT:      
0214   F5 00                  DW   backLink   
0216                BACKLINK:   .SET   HEADER_count   
0216   00                     DB   0   
0217   05 43 4F 55 4E 54      .PSTR   "COUNT"   
021D                COUNT:       
021D                          ;*Macro unroll:  ENTER
021D                          ;*Macro unroll:  _TDROP			; 10t	; x y 				T: a
021D   E1                     POP   HL   ; 10t	; x y 				T: a
021E                          ;*Macro unroll:  _RPUSH H,L		; 34t	; x y    	R: a	
021E   0B                     DEC   BC   ; 34t	; x y    	R: a	
021F   7D                     LD   A,L   
0220   02                     LD   (BC),A   
0221   0B                     DEC   BC   
0222   7C                     LD   A,H   
0223   02                     LD   (BC),A   
0224                          ;*Macro unroll:  _dup
0224   D5                     PUSH   DE   
0225                          ;*Macro unroll:  _onePlus
0225   13                     INC   DE   
0226                          ;*Macro unroll:  _swap
0226                          ;*Macro unroll:  _toT			; 14t			x1			T: x2
0226   EB                     EX   DE,HL   ; 14t			x1			T: x2
0227   D1                     POP   DE   
0228                          ;*Macro unroll:  PUSH HL			; 11t			x2 x1
0228   E5                     PUSH   HL   ; 11t			x2 x1
0229                          ;*Macro unroll:  _cat
0229                          ;*Macro unroll: 	EX DE,HL			; 4t
0229   EB                     EX   DE,HL   ; 4t
022A   5E                     LD   E,(HL)   
022B   16 00                  LD   D,0   
022D                          ;*Macro unroll:  EXIT
022D                          ;*Macro unroll: 	_RPOP H,L			; 34t			R: 		T: a
022D                          ;*Macro unroll: 	_RPEEK0 H,L			    ; 28t
022D   0A                     LD   A,(BC)   ; 28t
022E   6F                     LD   L,A   
022F   03                     INC   BC   
0230   0A                     LD   A,(BC)   
0231   67                     LD   H,A   
0232   03                     INC   BC   ; 34t			R: 		T: a
0233   E9                     JP   (HL)   
0234                INITIALLATEST:      
0234   14 02                  DW   backLink   
0236                START:       
0236                          ;*Macro unroll:  _initKernel
0236   DD E5                  PUSH   IX   
0238   31 80 20               LD   SP,dStack   
023B   01 00 21               LD   BC,rStack   
023E                          ;*Macro unroll:  _push FALSE
023E                          ;*Macro unroll:  _dup
023E   D5                     PUSH   DE   
023F   11 00 00               LD   DE,FALSE   
0242                          ;*Macro unroll:  _store state
0242                          ;*Macro unroll:  _push var_state
0242                          ;*Macro unroll:  _dup
0242   D5                     PUSH   DE   
0243   11 53 22               LD   DE,var_state   
0246                          ;*Macro unroll:  _bang
0246                          ;*Macro unroll: 	_toT				; 14t
0246   EB                     EX   DE,HL   ; 14t
0247   D1                     POP   DE   
0248   73                     LD   (HL),E   
0249   23                     INC   HL   
024A   72                     LD   (HL),D   
024B                          ;*Macro unroll:  _push 10
024B                          ;*Macro unroll:  _dup
024B   D5                     PUSH   DE   
024C   11 0A 00               LD   DE,10   
024F                          ;*Macro unroll:  _store base
024F                          ;*Macro unroll:  _push var_base
024F                          ;*Macro unroll:  _dup
024F   D5                     PUSH   DE   
0250   11 4D 22               LD   DE,var_base   
0253                          ;*Macro unroll:  _bang
0253                          ;*Macro unroll: 	_toT				; 14t
0253   EB                     EX   DE,HL   ; 14t
0254   D1                     POP   DE   
0255   73                     LD   (HL),E   
0256   23                     INC   HL   
0257   72                     LD   (HL),D   
0258                          ;*Macro unroll:  _fetch0 initialLatest
0258                          ;*Macro unroll:  _push initialLatest
0258                          ;*Macro unroll:  _dup
0258   D5                     PUSH   DE   
0259   11 34 02               LD   DE,initialLatest   
025C                          ;*Macro unroll:  _at
025C                          ;*Macro unroll:  EX DE,HL			; 4t
025C   EB                     EX   DE,HL   ; 4t
025D   5E                     LD   E,(HL)   
025E   23                     INC   HL   
025F   56                     LD   D,(HL)   
0260                          ;*Macro unroll:  _store latest
0260                          ;*Macro unroll:  _push var_latest
0260                          ;*Macro unroll:  _dup
0260   D5                     PUSH   DE   
0261   11 51 22               LD   DE,var_latest   
0264                          ;*Macro unroll:  _bang
0264                          ;*Macro unroll: 	_toT				; 14t
0264   EB                     EX   DE,HL   ; 14t
0265   D1                     POP   DE   
0266   73                     LD   (HL),E   
0267   23                     INC   HL   
0268   72                     LD   (HL),D   
0269                          ;*Macro unroll:  _push START_USER
0269                          ;*Macro unroll:  _dup
0269   D5                     PUSH   DE   
026A   11 81 22               LD   DE,START_USER   
026D                          ;*Macro unroll:  _store here
026D                          ;*Macro unroll:  _push var_here
026D                          ;*Macro unroll:  _dup
026D   D5                     PUSH   DE   
026E   11 4F 22               LD   DE,var_here   
0271                          ;*Macro unroll:  _bang
0271                          ;*Macro unroll: 	_toT				; 14t
0271   EB                     EX   DE,HL   ; 14t
0272   D1                     POP   DE   
0273   73                     LD   (HL),E   
0274   23                     INC   HL   
0275   72                     LD   (HL),D   
0276   DD E9                  JP   (IX)   
0278   CD 1C 01               CALL   initSerial   
027B                             ; call initInput
027B                             ; end header  ============================================================
027B   C3 5B 22               JP   TESTS_START   
2000                          .ORG   START_RAM   
2000                          DS   DSTACK_SIZE   
2080                DSTACK:      ; grows down
2080                          DS   RSTACK_SIZE   
2100                RSTACK:      ; grows down
2100   00 00        SERINPTR:   DW   0   
2102   00 00        SERRDPTR:   DW   0   
2104   00 00        SERBUFUSED:   DW   0   
2106                SERBUF:   DS   SER_BUFSIZE   
2145   00 00        LINEBUFSTART:   DW   0   
2147   00 00        LINEBUFSIZE:   DW   0   
2149   00 00        CURRKEY:   DW   0   
214B   00 00        LINEBUFTOP:   DW   0   
214D                LINEBUF:   DS   LINE_BUFSIZE   
21CD                WORDBUF1:   DS   64   
220D                WORDBUF2:   DS   64   
224D   00 00        VAR_BASE:   DW   0   
224F   00 00        VAR_HERE:   DW   0   
2251   00 00        VAR_LATEST:   DW   0   
2253   00 00        VAR_STATE:   DW   FALSE   
2255   00 00        CHARPTR:   DW   0   ; mocking getc
2257   00 00        TESCOUNT:   DW   0   ; core-tester
2259   00 00        TESDEPTH:   DW   0   ; core-tester
225B                TESTS_START:      
225B                          ;*Macro unroll:  _push 16
225B                          ;*Macro unroll:  _dup
225B   D5                     PUSH   DE   
225C   11 10 00               LD   DE,16   
225F                          ;*Macro unroll:  _store base
225F                          ;*Macro unroll:  _push var_base
225F                          ;*Macro unroll:  _dup
225F   D5                     PUSH   DE   
2260   11 4D 22               LD   DE,var_base   
2263                          ;*Macro unroll:  _bang
2263                          ;*Macro unroll: 	_toT				; 14t
2263   EB                     EX   DE,HL   ; 14t
2264   D1                     POP   DE   
2265   73                     LD   (HL),E   
2266   23                     INC   HL   
2267   72                     LD   (HL),D   
2268                          ;*Macro unroll:  _push 1
2268                          ;*Macro unroll:  _dup
2268   D5                     PUSH   DE   
2269   11 01 00               LD   DE,1   
226C                          ;*Macro unroll:  _push 2
226C                          ;*Macro unroll:  _dup
226C   D5                     PUSH   DE   
226D   11 02 00               LD   DE,2   
2270                          ;*Macro unroll:  _plus
2270                          ;*Macro unroll:  _toT
2270   EB                     EX   DE,HL   
2271   D1                     POP   DE   
2272   19                     ADD   HL,DE   
2273   EB                     EX   DE,HL   
2274                          ;*Macro unroll:  _push 3
2274                          ;*Macro unroll:  _dup
2274   D5                     PUSH   DE   
2275   11 03 00               LD   DE,3   
2278                          ;*Macro unroll:  _minus
2278                          ;*Macro unroll:  _TDROP
2278   E1                     POP   HL   
2279   B7                     OR   A   
227A   ED 52                  SBC   HL,DE   
227C   EB                     EX   DE,HL   
227D   CD FA 00               CALL   dot   
2280                             ; call tesStart
2280                             ; call tesEnter
2280                             ; _push 1
2280                             ; _dup
2280                             ; call tesExit
2280                             ; _push 1
2280                             ; _push 1
2280                             ; call tesEq
2280                             ; call tesEnd
2280                             ; _printString "\r\nDone! \r\n"
2280   76                     HALT      
2281                START_USER:      


TESTMODE:           0001 DEFINED AT LINE 3
ROM_SIZE:           2000 DEFINED AT LINE 1 IN constants.z80
                    > USED AT LINE 2 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
RAM_SIZE:           E000 DEFINED AT LINE 2 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
RSTACK_SIZE:        0080 DEFINED AT LINE 3 IN constants.z80
                    > USED AT LINE 3 IN variables.z80
DSTACK_SIZE:        0080 DEFINED AT LINE 4 IN constants.z80
                    > USED AT LINE 1 IN variables.z80
PAD_SIZE:           0080 DEFINED AT LINE 5 IN constants.z80
SER_BUFSIZE:        003F DEFINED AT LINE 7 IN constants.z80
                    > USED AT LINE 46 IN core-serial.z80
                    > USED AT LINE 54 IN core-serial.z80
                    > USED AT LINE 9 IN variables.z80
LINE_BUFSIZE:       0080 DEFINED AT LINE 8 IN constants.z80
                    > USED AT LINE 15 IN variables.z80
START_ROM:          0000 DEFINED AT LINE 10 IN constants.z80
                    > USED AT LINE 11 IN constants.z80
                    > USED AT LINE 15
START_RAM:          2000 DEFINED AT LINE 11 IN constants.z80
                    > USED AT LINE 12 IN constants.z80
                    > USED AT LINE 50
END_RAM:            10000 DEFINED AT LINE 12 IN constants.z80
                    > USED AT LINE 13 IN constants.z80
RET_STACK:          10000 DEFINED AT LINE 13 IN constants.z80
IMMED:              0040 DEFINED AT LINE 15 IN constants.z80
HIDE:               0080 DEFINED AT LINE 16 IN constants.z80
FALSE:              0000 DEFINED AT LINE 18 IN constants.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 23 IN variables.z80
TRUE:               00-1 DEFINED AT LINE 19 IN constants.z80
CALL_OPCODE:        00CD DEFINED AT LINE 21 IN constants.z80
JP_OPCODE:          00C3 DEFINED AT LINE 22 IN constants.z80
RET_OPCODE:         00C9 DEFINED AT LINE 23 IN constants.z80
BACKLINK:           0214 DEFINED AT LINE 6
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 37
RST00:              0000 DEFINED AT LINE 16
RST08:              0008 DEFINED AT LINE 21
RST38:              0038 DEFINED AT LINE 25
INITKERNEL:         003B DEFINED AT LINE 1 IN core-kernel.z80
HEADER_CAT:         0081 DEFINED AT LINE 4
                    > USED AT LINE 6
CAT:                0087 DEFINED AT LINE 9
HEADER_CSTORE:      009A DEFINED AT LINE 4
                    > USED AT LINE 6
CSTORE:             00A0 DEFINED AT LINE 9
HEADER_AT:          00B3 DEFINED AT LINE 4
                    > USED AT LINE 6
AT:                 00B8 DEFINED AT LINE 9
HEADER_STORE:       00CA DEFINED AT LINE 4
                    > USED AT LINE 6
STORE:              00CF DEFINED AT LINE 9
HEADER_EMIT:        00E4 DEFINED AT LINE 4
                    > USED AT LINE 6
EMIT:               00EC DEFINED AT LINE 9
                    > USED AT LINE 17 IN core-print.z80
HEADER_DOT:         00F5 DEFINED AT LINE 4
                    > USED AT LINE 6
DOT:                00FA DEFINED AT LINE 9
                    > USED AT LINE 66
DOT1:               010D DEFINED AT LINE 14 IN core-print.z80
                    > USED AT LINE 11 IN core-print.z80
DOT2:               0112 DEFINED AT LINE 16 IN core-print.z80
                    > USED AT LINE 13 IN core-print.z80
SER_EMPTYSIZE:      0005 DEFINED AT LINE 1 IN core-serial.z80
SER_FULLSIZE:       0030 DEFINED AT LINE 2 IN core-serial.z80
                    > USED AT LINE 64 IN core-serial.z80
IO_CTRL:            0080 DEFINED AT LINE 4 IN core-serial.z80
                    > USED AT LINE 22 IN core-serial.z80
                    > USED AT LINE 31 IN core-serial.z80
                    > USED AT LINE 67 IN core-serial.z80
                    > USED AT LINE 79 IN core-serial.z80
IO_DATA:            0081 DEFINED AT LINE 5 IN core-serial.z80
                    > USED AT LINE 34 IN core-serial.z80
                    > USED AT LINE 83 IN core-serial.z80
RTS_HIGH:           00D6 DEFINED AT LINE 6 IN core-serial.z80
                    > USED AT LINE 66 IN core-serial.z80
RTS_LOW:            0096 DEFINED AT LINE 7 IN core-serial.z80
                    > USED AT LINE 21 IN core-serial.z80
PORT_STATUS:        0004 DEFINED AT LINE 9 IN core-serial.z80
PORT_DATA:          0003 DEFINED AT LINE 10 IN core-serial.z80
INITSERIAL:         011C DEFINED AT LINE 13 IN core-serial.z80
                    > USED AT LINE 41
SERIALIN:           0133 DEFINED AT LINE 28 IN core-serial.z80
                    > USED AT LINE 26
SERIALIN1:          0140 DEFINED AT LINE 36 IN core-serial.z80
                    > USED AT LINE 33 IN core-serial.z80
SERIALIN2:          0144 DEFINED AT LINE 43 IN core-serial.z80
                    > USED AT LINE 35 IN core-serial.z80
SERIALIN21:         014E DEFINED AT LINE 50 IN core-serial.z80
                    > USED AT LINE 47 IN core-serial.z80
SERIALIN22:         015A DEFINED AT LINE 57 IN core-serial.z80
                    > USED AT LINE 55 IN core-serial.z80
SERIALIN23:         016E DEFINED AT LINE 68 IN core-serial.z80
                    > USED AT LINE 65 IN core-serial.z80
PUTC:               016F DEFINED AT LINE 76 IN core-serial.z80
                    > USED AT LINE 4 IN core-print.z80
PUTC0:              0170 DEFINED AT LINE 78 IN core-serial.z80
                    > USED AT LINE 81 IN core-serial.z80
SERREADY:           017A DEFINED AT LINE 91 IN core-serial.z80
GETC:               0180 DEFINED AT LINE 102 IN core-serial.z80
TOR:                018B DEFINED AT LINE 4 IN core-stack.z80
                    > USED AT LINE 25 IN core-stack.z80
                    > USED AT LINE 26 IN core-stack.z80
                    > USED AT LINE 42 IN core-stack.z80
                    > USED AT LINE 53 IN core-stack.z80
RFROM:              0196 DEFINED AT LINE 10 IN core-stack.z80
                    > USED AT LINE 31 IN core-stack.z80
                    > USED AT LINE 32 IN core-stack.z80
                    > USED AT LINE 38 IN core-stack.z80
                    > USED AT LINE 49 IN core-stack.z80
RAT:                01A1 DEFINED AT LINE 16 IN core-stack.z80
                    > USED AT LINE 39 IN core-stack.z80
TWOTOR:             01AC DEFINED AT LINE 22 IN core-stack.z80
TWORFROM:           01C3 DEFINED AT LINE 29 IN core-stack.z80
TWORAT:             01DA DEFINED AT LINE 36 IN core-stack.z80
LITSTRING:          01F5 DEFINED AT LINE 47 IN core-stack.z80
HEADER_COUNT:       0214 DEFINED AT LINE 4
                    > USED AT LINE 6
COUNT:              021D DEFINED AT LINE 9
                    > USED AT LINE 50 IN core-stack.z80
INITIALLATEST:      0234 DEFINED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 36
START:              0236 DEFINED AT LINE 39
                    > USED AT LINE 18
DSTACK:             2080 DEFINED AT LINE 2 IN variables.z80
                    > USED AT LINE 7
                    > USED AT LINE 7
RSTACK:             2100 DEFINED AT LINE 4 IN variables.z80
                    > USED AT LINE 8
                    > USED AT LINE 8
SERINPTR:           2100 DEFINED AT LINE 6 IN variables.z80
                    > USED AT LINE 18 IN core-serial.z80
                    > USED AT LINE 51 IN core-serial.z80
                    > USED AT LINE 58 IN core-serial.z80
SERRDPTR:           2102 DEFINED AT LINE 7 IN variables.z80
                    > USED AT LINE 19 IN core-serial.z80
SERBUFUSED:         2104 DEFINED AT LINE 8 IN variables.z80
                    > USED AT LINE 15 IN core-serial.z80
                    > USED AT LINE 45 IN core-serial.z80
                    > USED AT LINE 61 IN core-serial.z80
                    > USED AT LINE 63 IN core-serial.z80
                    > USED AT LINE 92 IN core-serial.z80
SERBUF:             2106 DEFINED AT LINE 9 IN variables.z80
                    > USED AT LINE 17 IN core-serial.z80
                    > USED AT LINE 54 IN core-serial.z80
                    > USED AT LINE 56 IN core-serial.z80
LINEBUFSTART:       2145 DEFINED AT LINE 11 IN variables.z80
LINEBUFSIZE:        2147 DEFINED AT LINE 12 IN variables.z80
CURRKEY:            2149 DEFINED AT LINE 13 IN variables.z80
LINEBUFTOP:         214B DEFINED AT LINE 14 IN variables.z80
LINEBUF:            214D DEFINED AT LINE 15 IN variables.z80
WORDBUF1:           21CD DEFINED AT LINE 17 IN variables.z80
WORDBUF2:           220D DEFINED AT LINE 18 IN variables.z80
VAR_BASE:           224D DEFINED AT LINE 20 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_HERE:           224F DEFINED AT LINE 21 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_LATEST:         2251 DEFINED AT LINE 22 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
VAR_STATE:          2253 DEFINED AT LINE 23 IN variables.z80
                    > USED AT LINE 36
                    > USED AT LINE 36
CHARPTR:            2255 DEFINED AT LINE 53
                    > USED AT LINE 107 IN core-serial.z80
                    > USED AT LINE 110 IN core-serial.z80
TESCOUNT:           2257 DEFINED AT LINE 54
TESDEPTH:           2259 DEFINED AT LINE 55
TESTS_START:        225B DEFINED AT LINE 57
                    > USED AT LINE 48
START_USER:         2281 DEFINED AT LINE 86
                    > USED AT LINE 36
                    > USED AT LINE 36
