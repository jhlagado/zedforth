; negate        ( num -- -num )
_code negate 

_code plus                   
_code minus                         

; n -- n
_head "1+",2
_code onePlus

_code oneMinus
_code twoPlus
_code twoMinus
_code cellPlus
_code cellMinus
_code twoSlash                           
_code eq                           
_code zeroLT
_code zeroEq

; UM* ( u1 u2 -- plo phi )
; unsigned multiply
umstar:                         
    exx
    ex DE,HL                            ; DE = u2
    _drop                               ; HL = u1
    push BC                             ; preserve BC
    ld BC,DE                            ; BC = u2
    ex DE,HL                            ; DE = u1, BC = u2
    ld HL,0                             ; HLDE = 0 0 u1hi u1lo
    ld A,17                             ; loop counter
    or A                                ; clear carry
umul1:
    rr H
    rr L
    rr D
    rr E
    jr nc,umul2
    add HL,BC
umul2:
    dec A
    jr nz, umul1
    pop BC                              ; restore BC
    ex DE,HL                            ; plo phi
    _dup                                ; plo plo
    ex DE,HL                            ; plo phi
    exx
    _next



;   <           ( n1 n2 -- t )
;               is less than
LT:	            ; less than
	_enter
	_unjoin
LT0:		
    _twoDup
	_call xorr 
    _zeroBranch LT1
    _drop
    _call zeroLT
	jr LT2
LT1:		
    _minus 
    _call zeroLT
LT2:
	_rejoin
	_exit

; >      n1 n2 -- flag          test n1 > n2
GT:
	_enter
	_unjoin

    _swap
    jr LT0

; max   n1 n2 -- u                      maximum
max:
	_enter
	_unjoin

    _twoDup
	_call LT 
    _zeroBranch max1
    _swap
max1:		
    _drop

	_rejoin
	_exit

; min   n1 n2 -- u                      minimum
min:
	_enter
	_unjoin

	_swap
	_call max

	_rejoin
	_exit
