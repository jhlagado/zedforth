SER_EMPTYSIZE   equ 5
SER_FULLSIZE    equ 30H

IO_CTRL         equ $80
IO_DATA         equ $81
RTS_HIGH        equ $D6                ; 11010110
RTS_LOW         equ $96                ; 10010110

PORT_STATUS     equ $04
PORT_DATA       equ $03

serialInt:
    push AF
    push HL
    in A,(IO_CTRL)
    and $01
    jr z,serialInt1
    in A,(IO_DATA)
    call serialInt2
    ld A,(serBufUsed)
    ld (serBufUsed),A
serialInt1:
    pop HL
    pop AF
    ei
    ret
serialInt2:
    push AF
    ld A,(serBufUsed)
    cp SER_BUFSIZE
    jr nz,serialInt3
    pop AF
    ret
serialInt3:
    ld HL,(serInPtr)
    ld A,L
    inc A
    and SER_BUFSIZE-1               ; Only mask low byte
    ld L,A
    ld (serInPtr),HL

    pop AF
    ld (HL),A
    ld A,(serBufUsed)
    inc A
    ld (serBufUsed),A
    cp SER_FULLSIZE
    jr c, serialInt45
    ld A,RTS_HIGH
    out (IO_CTRL),A
serialInt45:
    ret

; emit  ( c -- )
_head "emit",4
_code emit

; key   ( -- c )
; Wait for and return an input character.
_head "key",3
key:
    _enter
    _unjoin
key1:  
    _call qkey
    _zeroBranch key1 
    _rejoin
    _exit

; ?key  ( -- c T | F )
; Return input character and true, or a false if no input.
; ?key  ( -- c T | F )
; Return input character and true, or a false if no input.
_head "?key",4,
qkey:
    exx
    _fetchc serBufUsed              ; used      
    _isZero
    jr nz,qkey1
    _push FALSE                     ; FALSE
    jr qkey4
qkey1:
    _fetch serRdPtr                 ; ptr
    ld A,L
    inc A                           ; ptr+1
    and SER_BUFSIZE-1               ; Only mask low byte
    ld L,A
    _dup                            ; ptr+1 ptr+1
    _store serRdPtr                 ; ptr+1
    di
    _fetch serBufUsed
    _oneMinus
    _store serBufUsed
    ld A,L
    cp SER_EMPTYSIZE
    jr nc,qkey3
    ld A,RTS_LOW
    out (IO_CTRL),A
qkey3:                              ; ptr+1
    ei
    _cAt                            ; char
    _push TRUE                      ; TRUE
qkey4:
    exx
    _next

unkey:
    exx
    _fetch serRdPtr                 ; ptr
    ld A,L
    dec A
    and SER_BUFSIZE-1               ; Only mask low byte
    ld L,A
    _store serRdPtr                 ; ptr+1
    di
    _fetch serBufUsed
    _onePlus
    _store serBufUsed
    ei
    exx
    _next
    
; accept ptr max -- len    
accept:
    _enter
    _unjoin
    
    _over                           ; ptr max ptr
    _plus                           ; ptr ptr+max
    _oneMinus                       ; ptr1 ptr2
    _over                           ; ptr1 ptr2 ptr
    ld BC,HL                        
    _drop                           ; ptr1 ptr2             BC: ptr
accept1:
    _call key                       ; ptr1 ptr2 key
    ld A,L
    _call emit                      ; ptr1 ptr2
    bit 7,A                                                         ; EOF? used by tests
    jr nz,accept3
    cp "\n"
    jr z,accept3
    cp "\b"
    jr z,accept2
    _dup                            ; ptr1 ptr2 ptr2
    or a
    sbc HL,BC                       ; ptr1 ptr2 ptr2-BC     c: BC > ptr2
    _drop                           ; ptr1 ptr2                                                                                                                
    jr c,accept1                    ; ignore key
    ld (BC),A                       ; write key
    inc BC                          ; ptr1 ptr2             BC: ptr+1
    jr accept1
accept2:    
    _over                           ; ptr1 ptr2 ptr1    
    or A
    sbc HL,BC                       ; ptr1 ptr2 ptr1-BC     nc: BC < ptr1
    _drop
    jr nc,accept1                   ; ignore backspace
    dec BC                          ; ptr1 ptr2             BC: ptr-1
    jr accept1
accept3:
    _drop                           ; ptr1                  BC: ptr
    ld DE,BC                        ; ptr ptr1
    ex DE,HL
    or A
    sbc HL,DE                       ; len

    _rejoin
    _exit
    
    