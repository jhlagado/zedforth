; count ( ptr -- ptr+1 len )
; Return count byte of a string and add 1 to byte address.
_code count                   

; -- p n   
; is followed by a literal Packed (Pascal) string
litStr: 
    ex DE,HL
    _exPush
    exx
    _count    
    _twoDup           ; adr+1 len adr+1 len
    _plus             ; adr+1 len adr'
    exx
    _exPop
    ex DE,HL
    _next

; non-standard word
; SAME? ( a a n -- a a f \ -0+ )
; Compare n chars in two strings. Return 0 if identical.
sameq:
    _enter
    _unjoin

    jr sameq3           ; a1 a2 n            
sameq1:
    _call toR           ; a1 a2         R: n
    _over               ; a1 a2 a1
    _call rAt           ; a1 a2 a1 n
    _plus               ; a1 a2 a1+n
    _cAt                ; a1 a2 c1
    _over               ; a1 a2 c1 a2
    _call rAt           ; a1 a2 c1 a2 n
    _plus               ; a1 a2 c1 a2+n
    _cAt                ; a1 a2 c1 c2
    _minus              ; a1 a2 diff
    jr z,sameq2
    _call rFrom         ; a1 a2 -+ n
    _drop               ; a1 a2 -+
    jr sameq4           ; not equal
sameq2:
    _drop               ; a1 a2
    _call rFrom         ; a1 a2 n
sameq3:
    _loopNext sameq1    ; a1 a2 n    
sameq4:
    _rejoin
    _exit               ; a1 a2 0   ; equal
    
; compare ( p1 n1 p2 n2 â€“ n )     
    _enter
    _unjoin
    
    _call toR           ; p1 n1 p2              R: n2
    _swap               ; p1 p2 n1
    _dup                ; p1 p2 n1 n1
    _call rAt           ; p1 p2 n1 n1 n2        R: n2
    _minus              ; p1 p2 n1 diff
    _call rFrom         ; p1 p2 n1 diff n2
    _swap               ; p1 p2 n1 n2 diff
    _zeroBranch compare1
    _minus              ; p1 p2 diff
    jr compare2
compare1:
    _call min                ; p1 p2 nmin
    _call sameq              ; p1 p2 diff
compare2:
    _nip                ; p1 diff
    _nip                ; diff
    _rejoin
    _exit               
