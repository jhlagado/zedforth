; copy s1 into input stream
.macro _setInputText, s1
    _pushString {s1,"\r\n",-1,"\r\n"}       ; psrc len
    _dup                                    ; psrc len len
    _store serBufUsed                       ; psrc len  
    _push serBuf                            ; psrc len pdest
    _dup                                    ; psrc len pdest pdest
    _oneMinus
    _store serRdPtr                         ; psrc len pdest
    _swap                                   ; psrc pdest len
    _cmove                                  ; 
.endm

; _test ... _end .... _expect reason

; test ( -- )
; start of test, stores depth of stack as a baseline
.macro _test
    _call test
.endm

; tend ( -- hash )
; end of test, stores depth of stack used by test
; stores a hash of the stack items
.macro _end
    _call tend
.endm

; expect ( hash1 x1...xn -- bool )
; compares hash of stack with the one stored on stack
; if no match then display reason and abort
.macro _expect, reason
    _rejoin
    dw expect
    dw assert
    .pstr reason
    _unjoin
.endm

; assert ( bool -- )
; if bool is false then display reason and abort
.macro _assert, reason
    _rejoin
    dw assert
    .pstr reason
    _unjoin
.endm

