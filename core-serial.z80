SER_EMPTYSIZE   equ 5
SER_FULLSIZE    equ 30H

IO_CTRL         equ $80
IO_DATA         equ $81
RTS_HIGH        equ $D6                ; 11010110
RTS_LOW         equ $96                ; 10010110

PORT_STATUS     equ $04
PORT_DATA       equ $03

; destroys: HL
initSerial:
    ld HL,0
    ld (serbufused),HL

    ld HL,serbuf
    ld (serinptr),HL
    ld (serrdptr),HL

    ld A,RTS_LOW
    out (IO_CTRL),A

    im 1
    ei
    ret

serialIn:
    push AF
    push HL
    in A,(IO_CTRL)
    and $01
    jr z,serialIn1
    in A,(IO_DATA)
    call serialIn2
serialIn1:
    pop HL
    pop AF
    ei
    ret

; destroys: HL
serialIn2:
    push AF
    ld A,(serBufUsed)
    cp SER_BUFSIZE
    jr nz,serialIn21
    pop AF
    ret
serialIn21:
    ld HL,(serInPtr)
    inc HL
    ld A,L             ; Only need to check low byte becasuse lineBuf<256 bytes
    cp (serBuf + SER_BUFSIZE) & $FF
    jr nz,serialIn22
        ld HL,serBuf
serialIn22:
    ld (serInPtr),HL
    pop AF
    ld (HL),A
    ld A,(serBufUsed)
    inc A
    ld (serBufUsed),A
    cp SER_FULLSIZE
    jr c, serialIn23
    ld A,RTS_HIGH
    out (IO_CTRL),A
serialIn23:
    ret

; emit  ( c -- )
CODE "emit",emit
    pop IX
emit1:
    in A,(IO_CTRL)      ; Status byte
    bit 1,A             ; Set Zero flag if still transmitting character
    jr z,emit1
    ld A,E
    _drop
    out (IO_DATA),A         ; Output the character
    jp (IX)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; serReady - check if there is input waiting to be read
; flags: NZ if input ready
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

serReady:
    ld A,(serBufUsed)
    cp $0
    ret

; key   ( -- c )
; Wait for and return an input character.
CODE "key",key
    ENTER
key1:  
    call qkey
    _isZero
    jr z,key1 
    EXIT

; ?key  ( -- c T | F )
; Return input character and true, or a false if no input.
CODE "?key",qkey
    pop IX
    .if TESTMODE
        _fetch charPtr
        _dup
        _cat
        _swap
        _store charPtr
        _push TRUE
    .else
        ld A,(serBufUsed)
        cp $0
        jr nz, qkey1
        _push FALSE
        jp (IX)
qkey1:
        ld HL,(serRdPtr)
        inc HL
        ld A,L             ; Only need to check low byte because lineBuf<256 bytes
        cp (serBuf + SER_BUFSIZE) & $FF
        jr nz,qkey2
        ld HL,serBuf
qkey2:
        di
        ld (serRdPtr),HL
        ld A,(serBufUsed)
        dec A
        ld (serBufUsed),A
        cp SER_EMPTYSIZE
        jr nc,qkey3
        ld A,RTS_LOW
        out (IO_CTRL),A
qkey3:
        ld A,(HL)
        _push TRUE
        ei
    .endif
    jp (IX)

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ; getc - input
; ; returns: A = input char
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; getc:
;     push HL

;     .if TESTMODE

;     ld HL, (charPtr)
;     ld A, (HL)
;     inc HL
;     ld (charPtr), HL

;     .else
; getc0:
;     call serReady
;     jr z, getc0
;     ld HL,(serRdPtr)
;     inc HL
;     ld A,L             ; Only need to check low byte because lineBuf<256 bytes
;     cp (serBuf + SER_BUFSIZE) & $FF
;     jr nz,getc21
;     ld HL,serBuf
; getc21:
;     di
;     ld (serRdPtr),HL
;     ld A,(serBufUsed)
;     dec A
;     ld (serBufUsed),A
    
;     cp SER_EMPTYSIZE
;     jr nc,getc22
;     ld A,RTS_LOW
;     out (IO_CTRL),A
; getc22:
;     ld A,(HL)
;     ei

;     .endif

;     pop HL
;     ret
