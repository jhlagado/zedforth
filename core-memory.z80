; c@ ( a -- n )
MCODE 'c@',IMMED+2,cAt
POP HL
_cAt
JP (HL)

; c! ( n a -- )
MCODE 'c!',2,cBang
POP HL
_cBang
JP (HL)

; @ ( a -- n )
MCODE "@",2,at
POP HL
_at
JP (HL)

; ! ( n a -- )
MCODE "!",1,bang
POP HL
_bang
JP (HL)

; @ ( a -- n )
MCODE "2@",2,twoAt
POP IX
_twoAt
EXIT 1

; ! ( n a -- )
MCODE "2!",2,twoBang
POP IX
_twoBang
EXIT 1

; ! ( n a -- )
MCODE "+!",2,plusBang
POP IX
_plusBang
EXIT 1

; , ( w -- )
; Compile an integer into the code dictionary.
MCODE ",",1,COMMA
    ENTER 0
    _fetch var_here                             ; w here
    _dup                                        ; w here here
    call tor                                    ; w here        R: here
    _bang                                  
    call rfrom                                  ; here                                  
    _cellPlus                                   ; here+2
    _store var_here                             ; here+2 &here
    EXIT 0                                                     

MCODE "c,",1,CCOMMA
    ENTER 0
    _fetch var_here                             ; w here
    _dup                                 
    call tor                                    ; w here r: here
    _bang                                  
    call rfrom                                  ; here                                  
    _onePlus                                    ; here+1
    _cstore var_here                            ; here+1 &here
    EXIT 0                                                     

; call,       ( adr -- )
; Assemble a call instruction to adr
MCODE 'call,',5,CALLC
    ENTER 0
    _push CALL_OPCODE
    call ccomma
    call comma
    EXIT 0                                                     

; ALLOT       ( n -- )
; Allocate n bytes to the code dictionary.
MCODE "allot",5,allot               
    ENTER 0
    _fetch var_here 
    call plusBang                               ; adds n to here
    EXIT 0                                                     
