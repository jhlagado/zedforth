CODE ".",1,dot
    ENTER 0
    ld  A,E
    and $0F
    add a,$90
    daa
    adc a,$40
    daa
    ld E,A
    ld D,0
    call emit
    EXIT 0
    
; type  ( adr n -- )
; Output n characters from adr.
CODE 'type',4,type
    ENTER 0
    jr type2
type1:          
    _swap               ; 25t
    _dup                ; 11t
    _cAt                ; 18t
    call emit           ; 
    _onePlus            ; 6t
    _swap
type2:
    _loopNext TYPE1     ; 12t
    _drop               ; 10t
    _drop               ; 10t
    EXIT 0

; .s    ( x... -- x... ) 
; print stack (non-destructively)
CODE ".s",2,dots                
    ENTER 0
    _print "\r\n"
    call depth          ; x... n 
    _dup
    _zeroBranch dots3
    _push dStack        ; x... n s0
    _cellMinus
    _cellMinus          ; x... @x0 n
    _swap               
    jr dots2
dots1:
    _swap
    _dup
    _at
    call dot
    _space
    _cellMinus
    _swap
dots2:
    _loopNext dots1     ; 12t
    _drop
dots3:
    _drop
    _print "\r\n"
    EXIT 0
