.engine mycomputer

TESTMODE equ 1

    ; .include "header.z80"

;======================================================================

    .include "constants.z80"
    .include "code.mac.z80"
    .include "control.mac.z80"
    .include "dict.mac.z80"
    .include "kernel.mac.z80"
    .include "math.mac.z80"
    .include "memory.mac.z80"
    .include "print.mac.z80"
    .include "serial.mac.z80"
    .include "stack.mac.z80"
    .include "string.mac.z80"
    .include "util.mac.z80"
    ; .include "macros-compiler.z80"
    ; .include "macros-device.z80"
    ; .include "macros-dict.z80"
    ; .include "macros-input.z80"
    ; .include "macros-kernel.z80"
    ; .include "macros-math.z80"
    ; .include "macros-memory.z80"
    ; .include "macros-stack.z80"
    ; .include "macros-tester.z80"
    ; .include "macros-util.z80"

.org START_ROM
RST00:                                      ; Reset
    jp startForth

.org $0008
RST08:                                      ; rst 08 ENTER
    _rpush                              
    pop DE
    _next

.org $0018
RST18:                                      ; rst $18 REENTER
    pop DE
    _next

.org $0038
RST38:                                      ; rst 38 SEIAL INTERRUPT
    ; jp serialInt

codePtr  .set $ 

    .org $100
primPage:
    .include "bytecode.z80"

    .include "kernel.z80"
    .include "math.z80"
    .include "memory.z80"
    .include "serial.z80"
    .include "stack.z80"
    .include "string.z80"
    .include "print.z80"
    .include "util.z80"
    ; .include "core-compiler.z80"
    ; .include "core-control.z80"
    ; .include "core-find.z80"
    ; .include "core-logic.z80"
    ; .include "core-parse.z80"
    ; .include "core-tester.z80"

initialLatest:
    dw backLink

startForth:
    ld SP,dStack                            ; subroutine call to init so it can 
    call init                               ; be easily skipped during debugging
    jp startTests
    
.org START_RAM
    .include "variables.z80"

; end header  ============================================================  
    

    .include "colon.test.z80"
    ; .include "test-parse.z80"
    ; .include "test-find.z80"
    ; .include "test-string.z80"

test1:
    exx
    _pushString "HHHHHHello!"
    exx
    _enter
    dw type
    _unjoin
    _pushString "TTTThere!"
    _rejoin
    dw type
    _unjoin
    _rejoin
    _exit

startTests:
    _join
    dw test1
    dw lit
    db 'X',0
    dw emit
    dw lit
    dw $0123
    dw dot
    dw litStr
    .pstr "Hello!"
    dw type
    
    dw quit    

    ; dw lit, 3
    ; dw double, escape
    ; exx
    ; dec HL
    ; exx
    ; _reenter
    ; dw dot, quit

    ; _print "\r\nDone! \r\n"
    halt

START_USER:

CPP:                    ; grows up
    .org END_RAM - 2
NPP:                    ; grows down

codePtr .set CPP
headerPtr .set NPP

