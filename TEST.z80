.engine mycomputer

TESTMODE equ 1

    ; .include "header.z80"

;======================================================================

    .include "constants.z80"
    .include "control.mac.z80"
    .include "head.mac.z80"
    .include "kernel.mac.z80"
    .include "logic.mac.z80"
    .include "math.mac.z80"
    .include "memory.mac.z80"
    .include "print.mac.z80"
    .include "serial.mac.z80"
    .include "stack.mac.z80"
    .include "string.mac.z80"
    .include "tester.mac.z80"
    .include "util.mac.z80"
    ; .include "macros-compiler.z80"
    ; .include "macros-device.z80"
    ; .include "macros-dict.z80"
    ; .include "macros-input.z80"

.org START_ROM
RST00:                                      ; Reset
    jp startForth

.org $0008
RST08:                                      ; rst 08 enter
    pop DE
    _next

.org $0038
RST38:                                      ; rst 38 SERIAL INTERRUPT
    jp serialInt

codePtr  .set $ 

    .org $100
primPage:
    .include "bytecode.z80"

    .include "control.z80"
    .include "find.z80"
    .include "interp.z80"
    .include "kernel.z80"
    .include "logic.z80"
    .include "math.z80"
    .include "memory.z80"
    .include "number.z80"
    .include "parse.z80"
    .include "print.z80"
    .include "serial.z80"
    .include "stack.z80"
    .include "string.z80"
    .include "tester.z80"
    .include "util.z80"

    ; .include "core-compiler.z80"
    ; .include "core-control.z80"
    ; .include "core-find.z80"
    ; .include "core-parse.z80"

_head 'ok',2
    _enter
    _print "ok\r\n"
    _exit

initialLatest:
    dw backLink

startForth:
    ld SP,dStack                            ; subroutine call to init so it can 
    call init                               ; be easily skipped during debugging
    exx
    jp startTests
    
.org START_RAM
    .include "variables.z80"

; end header  ============================================================  

startTests:
    ; .include "stack.test.z80"
    ; .include "control.test.z80"
    ; .include "find.test.z80"
    ; .include "kernel.test.z80"
    ; .include "logic.test.z80"
    ; .include "math.test.z80"
    ; .include "memory.test.z80"
    ; .include "parse.test.z80"
    ; .include "string.test.z80"
    ; .include "util.test.z80"
    
    ; .include "print.test.z80"

; inline tests ============================================================  

; .macro _testInterp,str1,result1
;     _test
;         _setInputText str1
;         _call interpret
;     _end
;         _push result1
;     _expect {str1," should return result1"}
; .endm

_setInputText "3"
_call interpret
_call dots




; inline tests ============================================================  

    _cr
    _print "Done!"
    _call quit    

START_USER:

CPP:                    ; grows up
    .org END_RAM - 2
NPP:                    ; grows down

codePtr .set CPP
headerPtr .set NPP

