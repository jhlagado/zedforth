; .engine mycomputer

TESTMODE equ 1

    ; .include "header.z80"

;===============================================================================

    .include "constants.z80"
    .include "dict.mac.z80"
    .include "kernel.mac.z80"
    .include "math.mac.z80"
    .include "memory.mac.z80"
    .include "print.mac.z80"
    .include "stack.mac.z80"
    ; .include "macros-compiler.z80"
    ; .include "macros-control.z80"
    ; .include "macros-device.z80"
    ; .include "macros-dict.z80"
    ; .include "macros-input.z80"
    ; .include "macros-kernel.z80"
    ; .include "macros-math.z80"
    ; .include "macros-memory.z80"
    ; .include "macros-stack.z80"
    ; .include "macros-tester.z80"
    ; .include "macros-util.z80"

.org START_ROM
RST00:                                      ; Reset
    ld SP,dStack                            ; subroutine call to init so it can 
    call init                               ; be easily skipped during debugging
    _next                                   ; start Forth
    
.org $0008
RST08:                                      ; rst 08 ENTER
    _enter

.org $0018
RST20:                                      
    _mode8

.org $0020
RST18:                                      
    _mode16

.org $0038
RST38:                                      ; rst 38 SEIAL INTERRUPT
    ; jp serialInt

codePtr  .set $ 

    .org $100
primPage:
    .include "bytecode.z80"

    .include "kernel.z80"
    .include "serial.z80"
    ; .include "core-compiler.z80"
    ; .include "core-control.z80"
    ; .include "core-find.z80"
    ; .include "core-logic.z80"
    ; .include "core-math.z80"
    ; .include "core-memory.z80"
    ; .include "core-parse.z80"
    ; .include "core-print.z80"
    ; .include "core-tester.z80"
    ; .include "core-stack.z80"
    ; .include "core-string.z80"
    ; .include "core-util.z80"

initialLatest:
    dw backLink

next8:            ; 28t       EX1
	ld H,1                  ; page $100
    ld A,(BC)
    ld L,A
	inc BC
	jp (HL)

next16:            ; 38t       EX1
    ld A,(BC)
    ld L,A
	inc BC
    ld A,(BC)
    ld H,A
	inc BC
	jp (HL)

startForth:    
    dw lit, 3, double, dot, quit
 
.org START_RAM
    .include "variables.z80"

; end header  ============================================================  
    
testsStart:

    .include "colon.test.z80"
    ; .include "test-parse.z80"
    ; .include "test-find.z80"
    ; .include "test-string.z80"

    ; _print "\r\nDone! \r\n"
    halt

START_USER:

CPP:                    ; grows up
    .org END_RAM - 2
NPP:                    ; grows down

codePtr .set CPP
headerPtr .set NPP

