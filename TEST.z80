.engine mycomputer

TESTMODE equ 1

    ; .include "header.z80"

;======================================================================

    .include "constants.z80"
    .include "control.mac.z80"
    .include "head.mac.z80"
    .include "kernel.mac.z80"
    .include "logic.mac.z80"
    .include "math.mac.z80"
    .include "memory.mac.z80"
    .include "print.mac.z80"
    .include "serial.mac.z80"
    .include "stack.mac.z80"
    .include "string.mac.z80"
    .include "tester.mac.z80"
    .include "util.mac.z80"

.org START_ROM
RST00:                                      ; Reset
    jp startForth

.org $0008
RST08:                                      ; rst 08 enter
    pop DE
    _next

.org $0038
RST38:                                      ; rst 38 SERIAL INTERRUPT
    jp serialInt

codePtr  .set $ 

    .org $100
primPage:
    .include "bytecode.z80"

    .include "accept.z80"
    .include "control.z80"
    .include "find.z80"
    .include "interp.z80"
    .include "kernel.z80"
    .include "logic.z80"
    .include "math.z80"
    .include "memory.z80"
    .include "number.z80"
    .include "parse.z80"
    .include "print.z80"
    .include "serial.z80"
    .include "stack.z80"
    .include "string.z80"
    .include "tester.z80"
    .include "util.z80"

_head 'ok',2
    _enter
    _unjoin
    _print "ok\r\n"
    _rejoin
    _exit

initialLatest:
    dw backLink

startForth:
    ld SP,dStack                            ; subroutine call to init so it can 
    call init                               ; be easily skipped during debugging
    exx
    jp startTests
    
.org START_RAM
    .include "variables.z80"

; end header  ============================================================  

startTests:
    ; .include "stack.test.z80"
    ; .include "control.test.z80"
    ; .include "find.test.z80"
    ; .include "interp.test.z80"
    ; .include "kernel.test.z80"
    ; .include "logic.test.z80"
    ; .include "math.test.z80"
    ; .include "memory.test.z80"
    ; .include "number.test.z80"
    ; .include "parse.test.z80"
    ; .include "string.test.z80"
    ; .include "util.test.z80"
    
    ; .include "print.test.z80"

; inline tests ============================================================  

    _print "ZedForth by John Hardy \r\n\r\n"
    _call quit

; _test
;     _setSerialText "1+"
;     _push tib
;     _push TIB_SIZE
;     _call accept
;     _store var_tibUsed
;     _push tib
;     _store var_tibPtr

;     _push 3
;     _call interpret
; _end
;     _push 4
; _expect {"should increase by 1"}


; inline tests ============================================================  

    _call cr
    _print "Done!"
    _call quit    

START_USER:

CPP:                    ; grows up
    .org END_RAM - 2
NPP:                    ; grows down

codePtr .set CPP
headerPtr .set NPP

