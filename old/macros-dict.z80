codePtr0 .set 0
codePtr .set 0                              ; declare code forward from bottom of ROM
headerPtr .set END_ROM                      ; declare headers backwards from end of ROM
backLink .set 0                             ; backLink is null

.macro CODE, nameStr, lenFlags, label

label:                                      ; assembly label
    codePtr0 .set codePtr                   ; save code pointer
    codePtr .set $                          ; save code pointer
    
    .if backLink                            ; back patch code length
        .org headerPtr + 4
        dw (codePtr - codePtr0)             ; update clength of previous word
    .endif
    
    nameLen  .set (lenFlags & 01FH)         ; length byte in 5 least sig bits
    
    .org headerPtr - (nameLen + 8)          ; header -= (link + token + codelen + len + len byte)                                     ; ? needed
    headerPtr .set $                        ; save start of header
    
    dw backLink                             ; lfa: backLink       
    dw codePtr                              ; cfa: execution token
    dw 0                                    ; clength: placeholder

    backLink .set $                         ; link points to a name string (NFA)
    db lenFlags, nameStr                    ; name string
    
    .org codePtr                            ; restore code pointer
.endm

; .macro CONST, name, label, value
;     CODE name, label
;     call dup
;     ld BC, value
;     ret
; .endm

; .macro VAR, name, label, variable
;     CONST name, label, variable
; .endm
