; ?abort            ( f -- ) "abort text"
; if true display message and halt
qabort:
    ENTER 0
    _zeroBranch qabort1
    call rFrom
    call count      ; adr+1 len
    call type
    _print "\r\n"
    halt
qabort1:
    call rFrom
    call count      ; adr+1 len
    _plus           ; adr'
    ex DE,HL		; 
    _drop
    jp (HL)

; doNext ( -- ) ( r: idx ) followed by address of loop start
; Run time CODE for the single index loop.
doNext:                 ; ~274t
    _swap               ; 25t   ; ret 
    call rfrom          ; 60t   ; ret idx 
    _dup                ; 11t   ; ret idx idx
    _zeroBranch doNext1 ; 12t
    _oneMinus           ; 4t    ; ret idx'
    call tor            ; 60t   ; ret   R: idx'
    _at                 ; 32t   ; ret@  R: idx'
    jr doNext2          ; 12t
doNext1:
    _drop               ; 10t   ; ret
    _twoPlus            ; 12t   ; ret'
doNext2:
    ex DE,HL            ; 4t    ;       R: idx'     HL: ret@    
    _drop               ; 10t   ; 
    jp (HL)             ; 4t

CODE "?branch", 7, qbranch           
    pop IX
    _dup
    _isZero
    push IX
    jr z, branch
    pop HL
    inc HL
    inc HL

    jp (HL)

CODE "branch", 6, branch           
    pop HL
    ld A,(HL)
    inc HL
    ld H,(HL)
    ld L,A
    jp (HL)

CODE "execute", 7, execute
    pop IX
    ld HL,BC
    _drop
    push IX
    jp (HL)

; FOR         ( -- a )
; Start a FOR-NEXT loop structure in a colon definition.
CODE 'for',IMMED+3,for    
    ENTER 0
    _compile toR
    _fetch var_here
    EXIT 0

; NEXT        ( a -- )
; Terminate a FOR-NEXT loop structure.
CODE 'next',IMMED+4,next    
    ENTER 0
    _compile doNext
    call COMMA
    EXIT 0    
    
; AHEAD       ( -- A )
; Compile a forward branch instruction.
CODE 'ahead',IMMED+5,ahead
    ENTER 0
    _compile branch
    _fetch var_here
    _push 0
    call comma
    EXIT 0

; IF          ( -- A )
; Begin a conditional branch structure.

CODE 'if',IMMED+2,iff
    ENTER 0
    _compile qbranch
    _fetch var_here
    _push 0
    call comma
    EXIT 0

; ELSE        ( A -- A )
; Start the false clause in an IF-ELSE-THEN structure.
CODE 'else',IMMED+4,else
    ENTER 0
    call ahead
    _swap
    call thenn
    EXIT 0

; THEN        ( A -- )
; Terminate a conditional branch structure.
CODE 'then',IMMED+4,thenn
    ENTER 0
    _fetch var_here
    _swap
    _bang
    EXIT 0

; AFT         ( a -- a A )
; Jump to THEN in a FOR-AFT-THEN-NEXT loop the 1st time through.
CODE 'aft',IMMED+3,aft
    ENTER 0
    _drop
    call ahead
    call begin
    _swap
    EXIT 0

; BEGIN       ( -- a )
; Start an infinite or indefinite loop structure.
CODE 'begin',IMMED+5,begin
    ENTER 0
    _fetch var_here
    EXIT 0

; UNTIL       ( a -- )
; Terminate a BEGIN-UNTIL indefinite loop structure.
CODE 'until',IMMED+5,until
    ENTER 0
    _compile qbranch
    call comma
    EXIT 0

; AGAIN       ( a -- )
; Terminate a BEGIN-AGAIN infinite loop structure.

CODE 'again',IMMED+5,again
    ENTER 0
    _push jp_opcode
    call ccomma
    call comma
    EXIT 0

; REPEAT      ( A a -- )
; Terminate a BEGIN-WHILE-REPEAT indefinite loop.
CODE 'repeat',IMMED+6,repeat
    ENTER 0
    call again
    _fetch var_here
    _swap
    _bang
    EXIT 0

; WHILE       ( a -- A a )
; Conditional branch out of a BEGIN-WHILE-REPEAT loop.
CODE 'while',IMMED+5,while
    ENTER 0
    call iff
    _swap
    EXIT 0
